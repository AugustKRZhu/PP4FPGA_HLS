// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module scaled_fixed2ieee (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_V,
        prescale,
        ap_return
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_state5 = 8'd16;
parameter    ap_ST_fsm_state6 = 8'd32;
parameter    ap_ST_fsm_state7 = 8'd64;
parameter    ap_ST_fsm_state8 = 8'd128;
parameter    ap_const_lv32_0 = 32'd0;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [62:0] in_V;
input  [11:0] prescale;
output  [63:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[63:0] ap_return;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] out_bits_2_V_load_reg_676;
wire    ap_CS_fsm_state2;
reg   [31:0] out_bits_2_V_1_load_reg_682;
reg   [31:0] out_bits_2_V_2_load_reg_688;
wire   [1:0] i_1_fu_240_p2;
reg   [1:0] i_1_reg_697;
wire   [5:0] Hi_assign_fu_254_p2;
reg   [5:0] Hi_assign_reg_702;
wire   [0:0] exitcond1_fu_234_p2;
wire   [5:0] Lo_assign_fu_260_p2;
reg   [5:0] Lo_assign_reg_709;
wire   [5:0] tmp_24_fu_266_p2;
reg   [5:0] tmp_24_reg_717;
wire   [31:0] p_Result_28_fu_283_p5;
reg   [31:0] p_Result_28_reg_746;
wire   [15:0] tmp_36_fu_369_p1;
reg   [15:0] tmp_36_reg_751;
wire    ap_CS_fsm_state3;
wire   [2:0] i_2_fu_413_p2;
wire    ap_CS_fsm_state5;
wire   [0:0] tmp_37_fu_471_p3;
reg   [0:0] tmp_37_reg_767;
wire    ap_CS_fsm_state6;
wire   [2:0] i_3_fu_479_p2;
reg   [2:0] i_3_reg_771;
wire   [31:0] sh_assign_fu_501_p6;
reg   [31:0] sh_assign_reg_776;
reg   [0:0] isNeg_reg_783;
wire   [31:0] tmp_3_fu_523_p2;
reg   [31:0] tmp_3_reg_789;
wire   [31:0] shift_2_fu_529_p2;
wire    ap_CS_fsm_state7;
wire   [62:0] in_shift_V_fu_555_p3;
wire   [0:0] tmp_10_fu_567_p2;
reg   [0:0] tmp_10_reg_809;
wire   [0:0] tmp_9_fu_562_p2;
reg   [1:0] i_reg_138;
wire    ap_CS_fsm_state4;
reg   [31:0] p_Val2_2_reg_150;
reg   [2:0] i1_reg_161;
wire   [0:0] exitcond_fu_407_p2;
reg   [62:0] in_shift_reg_172;
reg   [31:0] shift_reg_182;
reg   [2:0] i2_reg_194;
reg   [62:0] p_Val2_s_reg_205;
reg   [31:0] shift_1_reg_215;
reg   [31:0] out_bits_2_V_fu_98;
wire   [31:0] out_bits_0_V_fu_380_p5;
reg   [31:0] out_bits_2_V_1_fu_102;
reg   [31:0] out_bits_2_V_2_fu_106;
reg   [31:0] c_3_fu_110;
reg   [31:0] c_0_fu_443_p3;
wire   [1:0] tmp_35_fu_419_p1;
reg   [31:0] c_3_1_fu_114;
reg   [31:0] c_3_2_fu_118;
reg   [31:0] c_3_3_fu_122;
wire   [5:0] tmp_7_fu_246_p3;
wire   [14:0] tmp_20_fu_272_p1;
wire   [15:0] tmp_fu_275_p3;
wire   [0:0] tmp_21_fu_295_p2;
wire   [5:0] tmp_23_fu_308_p2;
wire   [5:0] tmp_25_fu_312_p2;
reg   [62:0] tmp_22_fu_299_p4;
wire   [5:0] tmp_26_fu_316_p3;
wire   [5:0] tmp_28_fu_331_p3;
wire   [5:0] tmp_29_fu_337_p2;
wire   [62:0] tmp_27_fu_324_p3;
wire   [62:0] tmp_30_fu_343_p1;
wire   [62:0] tmp_31_fu_347_p1;
wire   [62:0] tmp_32_fu_351_p2;
wire   [62:0] tmp_33_fu_357_p2;
wire   [62:0] p_Result_s_fu_363_p2;
wire   [16:0] tmp_6_fu_373_p3;
wire   [1:0] p_Val2_30_fu_423_p5;
wire   [31:0] p_Val2_30_fu_423_p6;
reg   [31:0] p_Result_29_fu_433_p4;
wire   [1:0] sh_assign_fu_501_p5;
wire   [31:0] sh_assign_1_fu_534_p3;
wire   [62:0] tmp_4_fu_539_p1;
wire   [62:0] tmp_5_fu_549_p2;
wire   [62:0] tmp_8_fu_543_p2;
wire    ap_CS_fsm_state8;
wire   [11:0] tmp_s_fu_572_p2;
wire  signed [31:0] tmp_cast_fu_577_p1;
wire   [31:0] newexp_fu_581_p2;
wire   [0:0] tmp_40_fu_587_p3;
wire   [0:0] or_cond_fu_595_p2;
wire   [51:0] phitmp2_fu_604_p4;
wire   [10:0] tmp_41_fu_600_p1;
wire   [10:0] out_exp_V_fu_622_p3;
wire   [51:0] p_Val2_31_fu_614_p3;
wire   [63:0] p_Result_30_fu_630_p4;
wire   [63:0] result_write_assign_fu_640_p1;
reg   [63:0] ap_return_preg;
reg   [7:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
#0 ap_return_preg = 64'd0;
end

dft_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
dft_mux_42_32_1_1_U1(
    .din0(out_bits_2_V_load_reg_676),
    .din1(out_bits_2_V_1_load_reg_682),
    .din2(out_bits_2_V_2_load_reg_688),
    .din3(p_Result_28_reg_746),
    .din4(p_Val2_30_fu_423_p5),
    .dout(p_Val2_30_fu_423_p6)
);

dft_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
dft_mux_42_32_1_1_U2(
    .din0(c_3_1_fu_114),
    .din1(c_3_2_fu_118),
    .din2(c_3_3_fu_122),
    .din3(c_3_fu_110),
    .din4(sh_assign_fu_501_p5),
    .dout(sh_assign_fu_501_p6)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                ap_return_preg[0] <= 1'b0;
        ap_return_preg[1] <= 1'b0;
        ap_return_preg[2] <= 1'b0;
        ap_return_preg[3] <= 1'b0;
        ap_return_preg[4] <= 1'b0;
        ap_return_preg[5] <= 1'b0;
        ap_return_preg[6] <= 1'b0;
        ap_return_preg[7] <= 1'b0;
        ap_return_preg[8] <= 1'b0;
        ap_return_preg[9] <= 1'b0;
        ap_return_preg[10] <= 1'b0;
        ap_return_preg[11] <= 1'b0;
        ap_return_preg[12] <= 1'b0;
        ap_return_preg[13] <= 1'b0;
        ap_return_preg[14] <= 1'b0;
        ap_return_preg[15] <= 1'b0;
        ap_return_preg[16] <= 1'b0;
        ap_return_preg[17] <= 1'b0;
        ap_return_preg[18] <= 1'b0;
        ap_return_preg[19] <= 1'b0;
        ap_return_preg[20] <= 1'b0;
        ap_return_preg[21] <= 1'b0;
        ap_return_preg[22] <= 1'b0;
        ap_return_preg[23] <= 1'b0;
        ap_return_preg[24] <= 1'b0;
        ap_return_preg[25] <= 1'b0;
        ap_return_preg[26] <= 1'b0;
        ap_return_preg[27] <= 1'b0;
        ap_return_preg[28] <= 1'b0;
        ap_return_preg[29] <= 1'b0;
        ap_return_preg[30] <= 1'b0;
        ap_return_preg[31] <= 1'b0;
        ap_return_preg[32] <= 1'b0;
        ap_return_preg[33] <= 1'b0;
        ap_return_preg[34] <= 1'b0;
        ap_return_preg[35] <= 1'b0;
        ap_return_preg[36] <= 1'b0;
        ap_return_preg[37] <= 1'b0;
        ap_return_preg[38] <= 1'b0;
        ap_return_preg[39] <= 1'b0;
        ap_return_preg[40] <= 1'b0;
        ap_return_preg[41] <= 1'b0;
        ap_return_preg[42] <= 1'b0;
        ap_return_preg[43] <= 1'b0;
        ap_return_preg[44] <= 1'b0;
        ap_return_preg[45] <= 1'b0;
        ap_return_preg[46] <= 1'b0;
        ap_return_preg[47] <= 1'b0;
        ap_return_preg[48] <= 1'b0;
        ap_return_preg[49] <= 1'b0;
        ap_return_preg[50] <= 1'b0;
        ap_return_preg[51] <= 1'b0;
        ap_return_preg[52] <= 1'b0;
        ap_return_preg[53] <= 1'b0;
        ap_return_preg[54] <= 1'b0;
        ap_return_preg[55] <= 1'b0;
        ap_return_preg[56] <= 1'b0;
        ap_return_preg[57] <= 1'b0;
        ap_return_preg[58] <= 1'b0;
        ap_return_preg[59] <= 1'b0;
        ap_return_preg[60] <= 1'b0;
        ap_return_preg[61] <= 1'b0;
        ap_return_preg[62] <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state8)) begin
                        ap_return_preg[62 : 0] <= result_write_assign_fu_640_p1[62 : 0];
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_407_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        i1_reg_161 <= i_2_fu_413_p2;
    end else if (((exitcond1_fu_234_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i1_reg_161 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_407_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        i2_reg_194 <= 3'd0;
    end else if (((tmp_9_fu_562_p2 == 1'd1) & (tmp_37_reg_767 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        i2_reg_194 <= i_3_reg_771;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_reg_138 <= i_1_reg_697;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_138 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_407_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        in_shift_reg_172 <= in_V;
    end else if (((tmp_9_fu_562_p2 == 1'd1) & (tmp_37_reg_767 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        in_shift_reg_172 <= in_shift_V_fu_555_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        if ((i_reg_138 == 2'd0)) begin
            p_Val2_2_reg_150 <= out_bits_2_V_load_reg_676;
        end else if ((~(i_reg_138 == 2'd0) & ~(i_reg_138 == 2'd1))) begin
            p_Val2_2_reg_150 <= out_bits_2_V_2_load_reg_688;
        end else if ((i_reg_138 == 2'd1)) begin
            p_Val2_2_reg_150 <= out_bits_2_V_1_load_reg_682;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_37_reg_767 == 1'd0) & (tmp_9_fu_562_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        p_Val2_s_reg_205 <= in_shift_V_fu_555_p3;
    end else if (((tmp_37_fu_471_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        p_Val2_s_reg_205 <= in_shift_reg_172;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_37_reg_767 == 1'd0) & (tmp_9_fu_562_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        shift_1_reg_215 <= shift_2_fu_529_p2;
    end else if (((tmp_37_fu_471_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        shift_1_reg_215 <= shift_reg_182;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_407_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        shift_reg_182 <= 32'd0;
    end else if (((tmp_9_fu_562_p2 == 1'd1) & (tmp_37_reg_767 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        shift_reg_182 <= shift_2_fu_529_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_234_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        Hi_assign_reg_702[5 : 4] <= Hi_assign_fu_254_p2[5 : 4];
        Lo_assign_reg_709[5 : 4] <= Lo_assign_fu_260_p2[5 : 4];
        tmp_24_reg_717[5 : 4] <= tmp_24_fu_266_p2[5 : 4];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_407_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5) & (tmp_35_fu_419_p1 == 2'd0))) begin
        c_3_1_fu_114 <= c_0_fu_443_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_407_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5) & (tmp_35_fu_419_p1 == 2'd1))) begin
        c_3_2_fu_118 <= c_0_fu_443_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_407_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5) & (tmp_35_fu_419_p1 == 2'd2))) begin
        c_3_3_fu_122 <= c_0_fu_443_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_407_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5) & (tmp_35_fu_419_p1 == 2'd3))) begin
        c_3_fu_110 <= c_0_fu_443_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_1_reg_697 <= i_1_fu_240_p2;
        out_bits_2_V_1_load_reg_682 <= out_bits_2_V_1_fu_102;
        out_bits_2_V_2_load_reg_688 <= out_bits_2_V_2_fu_106;
        out_bits_2_V_load_reg_676 <= out_bits_2_V_fu_98;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i_3_reg_771 <= i_3_fu_479_p2;
        tmp_37_reg_767 <= i2_reg_194[32'd2];
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_37_fu_471_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        isNeg_reg_783 <= sh_assign_fu_501_p6[32'd31];
        sh_assign_reg_776 <= sh_assign_fu_501_p6;
        tmp_3_reg_789 <= tmp_3_fu_523_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (i_reg_138 == 2'd1))) begin
        out_bits_2_V_1_fu_102 <= out_bits_0_V_fu_380_p5;
    end
end

always @ (posedge ap_clk) begin
    if ((~(i_reg_138 == 2'd0) & ~(i_reg_138 == 2'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        out_bits_2_V_2_fu_106 <= out_bits_0_V_fu_380_p5;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (i_reg_138 == 2'd0))) begin
        out_bits_2_V_fu_98 <= out_bits_0_V_fu_380_p5;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_234_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        p_Result_28_reg_746 <= p_Result_28_fu_283_p5;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & ((tmp_37_reg_767 == 1'd1) | (tmp_9_fu_562_p2 == 1'd0)))) begin
        tmp_10_reg_809 <= tmp_10_fu_567_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tmp_36_reg_751 <= tmp_36_fu_369_p1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        ap_return = result_write_assign_fu_640_p1;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond1_fu_234_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state5 : begin
            if (((exitcond_fu_407_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & ((tmp_37_reg_767 == 1'd1) | (tmp_9_fu_562_p2 == 1'd0)))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Hi_assign_fu_254_p2 = ($signed(6'd62) - $signed(tmp_7_fu_246_p3));

assign Lo_assign_fu_260_p2 = ($signed(6'd47) - $signed(tmp_7_fu_246_p3));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];


always @ (p_Result_29_fu_433_p4) begin
    if (p_Result_29_fu_433_p4[0] == 1'b1) begin
        c_0_fu_443_p3 = 32'd0;
    end else if (p_Result_29_fu_433_p4[1] == 1'b1) begin
        c_0_fu_443_p3 = 32'd1;
    end else if (p_Result_29_fu_433_p4[2] == 1'b1) begin
        c_0_fu_443_p3 = 32'd2;
    end else if (p_Result_29_fu_433_p4[3] == 1'b1) begin
        c_0_fu_443_p3 = 32'd3;
    end else if (p_Result_29_fu_433_p4[4] == 1'b1) begin
        c_0_fu_443_p3 = 32'd4;
    end else if (p_Result_29_fu_433_p4[5] == 1'b1) begin
        c_0_fu_443_p3 = 32'd5;
    end else if (p_Result_29_fu_433_p4[6] == 1'b1) begin
        c_0_fu_443_p3 = 32'd6;
    end else if (p_Result_29_fu_433_p4[7] == 1'b1) begin
        c_0_fu_443_p3 = 32'd7;
    end else if (p_Result_29_fu_433_p4[8] == 1'b1) begin
        c_0_fu_443_p3 = 32'd8;
    end else if (p_Result_29_fu_433_p4[9] == 1'b1) begin
        c_0_fu_443_p3 = 32'd9;
    end else if (p_Result_29_fu_433_p4[10] == 1'b1) begin
        c_0_fu_443_p3 = 32'd10;
    end else if (p_Result_29_fu_433_p4[11] == 1'b1) begin
        c_0_fu_443_p3 = 32'd11;
    end else if (p_Result_29_fu_433_p4[12] == 1'b1) begin
        c_0_fu_443_p3 = 32'd12;
    end else if (p_Result_29_fu_433_p4[13] == 1'b1) begin
        c_0_fu_443_p3 = 32'd13;
    end else if (p_Result_29_fu_433_p4[14] == 1'b1) begin
        c_0_fu_443_p3 = 32'd14;
    end else if (p_Result_29_fu_433_p4[15] == 1'b1) begin
        c_0_fu_443_p3 = 32'd15;
    end else if (p_Result_29_fu_433_p4[16] == 1'b1) begin
        c_0_fu_443_p3 = 32'd16;
    end else if (p_Result_29_fu_433_p4[17] == 1'b1) begin
        c_0_fu_443_p3 = 32'd17;
    end else if (p_Result_29_fu_433_p4[18] == 1'b1) begin
        c_0_fu_443_p3 = 32'd18;
    end else if (p_Result_29_fu_433_p4[19] == 1'b1) begin
        c_0_fu_443_p3 = 32'd19;
    end else if (p_Result_29_fu_433_p4[20] == 1'b1) begin
        c_0_fu_443_p3 = 32'd20;
    end else if (p_Result_29_fu_433_p4[21] == 1'b1) begin
        c_0_fu_443_p3 = 32'd21;
    end else if (p_Result_29_fu_433_p4[22] == 1'b1) begin
        c_0_fu_443_p3 = 32'd22;
    end else if (p_Result_29_fu_433_p4[23] == 1'b1) begin
        c_0_fu_443_p3 = 32'd23;
    end else if (p_Result_29_fu_433_p4[24] == 1'b1) begin
        c_0_fu_443_p3 = 32'd24;
    end else if (p_Result_29_fu_433_p4[25] == 1'b1) begin
        c_0_fu_443_p3 = 32'd25;
    end else if (p_Result_29_fu_433_p4[26] == 1'b1) begin
        c_0_fu_443_p3 = 32'd26;
    end else if (p_Result_29_fu_433_p4[27] == 1'b1) begin
        c_0_fu_443_p3 = 32'd27;
    end else if (p_Result_29_fu_433_p4[28] == 1'b1) begin
        c_0_fu_443_p3 = 32'd28;
    end else if (p_Result_29_fu_433_p4[29] == 1'b1) begin
        c_0_fu_443_p3 = 32'd29;
    end else if (p_Result_29_fu_433_p4[30] == 1'b1) begin
        c_0_fu_443_p3 = 32'd30;
    end else if (p_Result_29_fu_433_p4[31] == 1'b1) begin
        c_0_fu_443_p3 = 32'd31;
    end else begin
        c_0_fu_443_p3 = 32'd32;
    end
end

assign exitcond1_fu_234_p2 = ((i_reg_138 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond_fu_407_p2 = ((i1_reg_161 == 3'd4) ? 1'b1 : 1'b0);

assign i_1_fu_240_p2 = (i_reg_138 + 2'd1);

assign i_2_fu_413_p2 = (i1_reg_161 + 3'd1);

assign i_3_fu_479_p2 = (i2_reg_194 + 3'd1);

assign in_shift_V_fu_555_p3 = ((isNeg_reg_783[0:0] === 1'b1) ? tmp_5_fu_549_p2 : tmp_8_fu_543_p2);

assign newexp_fu_581_p2 = ($signed(tmp_cast_fu_577_p1) - $signed(shift_1_reg_215));

assign or_cond_fu_595_p2 = (tmp_40_fu_587_p3 | tmp_10_reg_809);

assign out_bits_0_V_fu_380_p5 = {{tmp_6_fu_373_p3}, {p_Val2_2_reg_150[14:0]}};

assign out_exp_V_fu_622_p3 = ((or_cond_fu_595_p2[0:0] === 1'b1) ? 11'd0 : tmp_41_fu_600_p1);

assign p_Result_28_fu_283_p5 = {{tmp_fu_275_p3}, {ap_const_lv32_0[15:0]}};

integer ap_tvar_int_0;

always @ (p_Val2_30_fu_423_p6) begin
    for (ap_tvar_int_0 = 32 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 31 - 0) begin
            p_Result_29_fu_433_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            p_Result_29_fu_433_p4[ap_tvar_int_0] = p_Val2_30_fu_423_p6[31 - ap_tvar_int_0];
        end
    end
end

assign p_Result_30_fu_630_p4 = {{{{1'd0}, {out_exp_V_fu_622_p3}}}, {p_Val2_31_fu_614_p3}};

assign p_Result_s_fu_363_p2 = (tmp_33_fu_357_p2 & tmp_32_fu_351_p2);

assign p_Val2_30_fu_423_p5 = i1_reg_161[1:0];

assign p_Val2_31_fu_614_p3 = ((or_cond_fu_595_p2[0:0] === 1'b1) ? 52'd0 : phitmp2_fu_604_p4);

assign phitmp2_fu_604_p4 = {{p_Val2_s_reg_205[61:10]}};

assign result_write_assign_fu_640_p1 = p_Result_30_fu_630_p4;

assign sh_assign_1_fu_534_p3 = ((isNeg_reg_783[0:0] === 1'b1) ? tmp_3_reg_789 : sh_assign_reg_776);

assign sh_assign_fu_501_p5 = i2_reg_194[1:0];

assign shift_2_fu_529_p2 = (sh_assign_reg_776 + shift_reg_182);

assign tmp_10_fu_567_p2 = ((in_V == 63'd0) ? 1'b1 : 1'b0);

assign tmp_20_fu_272_p1 = in_V[14:0];

assign tmp_21_fu_295_p2 = ((Lo_assign_reg_709 > Hi_assign_reg_702) ? 1'b1 : 1'b0);

integer ap_tvar_int_1;

always @ (in_V) begin
    for (ap_tvar_int_1 = 63 - 1; ap_tvar_int_1 >= 0; ap_tvar_int_1 = ap_tvar_int_1 - 1) begin
        if (ap_tvar_int_1 > 62 - 0) begin
            tmp_22_fu_299_p4[ap_tvar_int_1] = 1'b0;
        end else begin
            tmp_22_fu_299_p4[ap_tvar_int_1] = in_V[62 - ap_tvar_int_1];
        end
    end
end

assign tmp_23_fu_308_p2 = (Lo_assign_reg_709 - Hi_assign_reg_702);

assign tmp_24_fu_266_p2 = ($signed(6'd62) - $signed(Lo_assign_fu_260_p2));

assign tmp_25_fu_312_p2 = (Hi_assign_reg_702 - Lo_assign_reg_709);

assign tmp_26_fu_316_p3 = ((tmp_21_fu_295_p2[0:0] === 1'b1) ? tmp_23_fu_308_p2 : tmp_25_fu_312_p2);

assign tmp_27_fu_324_p3 = ((tmp_21_fu_295_p2[0:0] === 1'b1) ? tmp_22_fu_299_p4 : in_V);

assign tmp_28_fu_331_p3 = ((tmp_21_fu_295_p2[0:0] === 1'b1) ? tmp_24_reg_717 : Lo_assign_reg_709);

assign tmp_29_fu_337_p2 = ($signed(6'd62) - $signed(tmp_26_fu_316_p3));

assign tmp_30_fu_343_p1 = tmp_28_fu_331_p3;

assign tmp_31_fu_347_p1 = tmp_29_fu_337_p2;

assign tmp_32_fu_351_p2 = tmp_27_fu_324_p3 >> tmp_30_fu_343_p1;

assign tmp_33_fu_357_p2 = 63'd9223372036854775807 >> tmp_31_fu_347_p1;

assign tmp_35_fu_419_p1 = i1_reg_161[1:0];

assign tmp_36_fu_369_p1 = p_Result_s_fu_363_p2[15:0];

assign tmp_37_fu_471_p3 = i2_reg_194[32'd2];

assign tmp_3_fu_523_p2 = (32'd0 - sh_assign_fu_501_p6);

assign tmp_40_fu_587_p3 = newexp_fu_581_p2[32'd31];

assign tmp_41_fu_600_p1 = newexp_fu_581_p2[10:0];

assign tmp_4_fu_539_p1 = sh_assign_1_fu_534_p3;

assign tmp_5_fu_549_p2 = $signed(in_shift_reg_172) >>> tmp_4_fu_539_p1;

assign tmp_6_fu_373_p3 = {{tmp_36_reg_751}, {1'd1}};

assign tmp_7_fu_246_p3 = {{i_reg_138}, {4'd0}};

assign tmp_8_fu_543_p2 = in_shift_reg_172 << tmp_4_fu_539_p1;

assign tmp_9_fu_562_p2 = ((sh_assign_reg_776 == 32'd16) ? 1'b1 : 1'b0);

assign tmp_cast_fu_577_p1 = $signed(tmp_s_fu_572_p2);

assign tmp_fu_275_p3 = {{tmp_20_fu_272_p1}, {1'd1}};

assign tmp_s_fu_572_p2 = (12'd1023 - prescale);

always @ (posedge ap_clk) begin
    Hi_assign_reg_702[3:0] <= 4'b1110;
    Lo_assign_reg_709[3:0] <= 4'b1111;
    tmp_24_reg_717[3:0] <= 4'b1111;
    ap_return_preg[63] <= 1'b0;
end

endmodule //scaled_fixed2ieee
