-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sin_or_cos_double_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    t_in : IN STD_LOGIC_VECTOR (63 downto 0);
    do_cos : IN STD_LOGIC;
    ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of sin_or_cos_double_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (23 downto 0) := "000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (23 downto 0) := "000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (23 downto 0) := "000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (23 downto 0) := "000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (23 downto 0) := "000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (23 downto 0) := "000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (23 downto 0) := "000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (23 downto 0) := "000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (23 downto 0) := "000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (23 downto 0) := "001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (23 downto 0) := "010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (23 downto 0) := "100000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv11_3FE : STD_LOGIC_VECTOR (10 downto 0) := "01111111110";
    constant ap_const_lv11_44D : STD_LOGIC_VECTOR (10 downto 0) := "10001001101";
    constant ap_const_lv11_4A : STD_LOGIC_VECTOR (10 downto 0) := "00001001010";
    constant ap_const_lv32_56 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010110";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_A6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100110";
    constant ap_const_lv32_A7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100111";
    constant ap_const_lv32_A9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv124_0 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_7B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111011";
    constant ap_const_lv11_403 : STD_LOGIC_VECTOR (10 downto 0) := "10000000011";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_61 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100001";
    constant ap_const_lv32_6B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101011";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_5C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011100";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv63_7FFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (62 downto 0) := "111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv32_7D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111101";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv52_FFFFFFFFFFFFF : STD_LOGIC_VECTOR (51 downto 0) := "1111111111111111111111111111111111111111111111111111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ref_4oPi_table_256_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal ref_4oPi_table_256_V_ce0 : STD_LOGIC;
    signal ref_4oPi_table_256_V_q0 : STD_LOGIC_VECTOR (255 downto 0);
    signal fourth_order_double_4_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal fourth_order_double_4_ce0 : STD_LOGIC;
    signal fourth_order_double_4_q0 : STD_LOGIC_VECTOR (58 downto 0);
    signal fourth_order_double_5_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal fourth_order_double_5_ce0 : STD_LOGIC;
    signal fourth_order_double_5_q0 : STD_LOGIC_VECTOR (51 downto 0);
    signal fourth_order_double_6_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal fourth_order_double_6_ce0 : STD_LOGIC;
    signal fourth_order_double_6_q0 : STD_LOGIC_VECTOR (43 downto 0);
    signal fourth_order_double_7_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal fourth_order_double_7_ce0 : STD_LOGIC;
    signal fourth_order_double_7_q0 : STD_LOGIC_VECTOR (32 downto 0);
    signal fourth_order_double_s_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal fourth_order_double_s_ce0 : STD_LOGIC;
    signal fourth_order_double_s_q0 : STD_LOGIC_VECTOR (24 downto 0);
    signal p_Result_19_reg_1102 : STD_LOGIC_VECTOR (0 downto 0);
    signal loc_V_fu_286_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal loc_V_reg_1108 : STD_LOGIC_VECTOR (10 downto 0);
    signal loc_V_1_fu_296_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal loc_V_1_reg_1115 : STD_LOGIC_VECTOR (51 downto 0);
    signal closepath_fu_300_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal closepath_reg_1121 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_fu_335_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_13_reg_1132 : STD_LOGIC_VECTOR (6 downto 0);
    signal ret_V_reg_1137 : STD_LOGIC_VECTOR (169 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_7_fu_378_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_reg_1152 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_8_reg_1158 : STD_LOGIC_VECTOR (123 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_14_i_reg_1164 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_Val2_29_fu_403_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_Val2_29_reg_1169 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal p_Val2_11_fu_418_p3 : STD_LOGIC_VECTOR (123 downto 0);
    signal p_Val2_11_reg_1175 : STD_LOGIC_VECTOR (123 downto 0);
    signal p_Result_i2_i_reg_1180 : STD_LOGIC_VECTOR (60 downto 0);
    signal Mx_V_reg_1185 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal Ex_V_fu_507_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal Ex_V_reg_1192 : STD_LOGIC_VECTOR (10 downto 0);
    signal isNeg_reg_1198 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_521_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_reg_1204 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_526_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_reg_1210 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_i_reg_1218 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal p_Val2_15_fu_582_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal p_Val2_15_reg_1223 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_i1_reg_1228 : STD_LOGIC_VECTOR (48 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal tmp_fu_596_p10 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_1239 : STD_LOGIC_VECTOR (0 downto 0);
    signal OP1_V_fu_617_p1 : STD_LOGIC_VECTOR (97 downto 0);
    signal OP1_V_reg_1245 : STD_LOGIC_VECTOR (97 downto 0);
    signal not_do_cos_i_fu_626_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_do_cos_i_reg_1252 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_30_i_fu_645_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_30_i_reg_1257 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_25_i_reg_1274 : STD_LOGIC_VECTOR (48 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal fourth_order_double_10_reg_1280 : STD_LOGIC_VECTOR (51 downto 0);
    signal fourth_order_double_12_reg_1285 : STD_LOGIC_VECTOR (43 downto 0);
    signal OP2_V_fu_661_p1 : STD_LOGIC_VECTOR (97 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal tmp_27_i_reg_1332 : STD_LOGIC_VECTOR (41 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal tmp_29_i_reg_1337 : STD_LOGIC_VECTOR (34 downto 0);
    signal p_Val2_19_reg_1342 : STD_LOGIC_VECTOR (58 downto 0);
    signal tmp_12_i_reg_1347 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_14_i1_reg_1352 : STD_LOGIC_VECTOR (47 downto 0);
    signal fourth_order_double_14_reg_1357 : STD_LOGIC_VECTOR (32 downto 0);
    signal fourth_order_double_16_reg_1362 : STD_LOGIC_VECTOR (24 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal tmp_2_reg_1377 : STD_LOGIC_VECTOR (28 downto 0);
    signal p_Val2_22_fu_796_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_22_reg_1382 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_reg_1387 : STD_LOGIC_VECTOR (36 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal cos_basis_fu_817_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal cos_basis_reg_1392 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal r_V_3_fu_834_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_3_reg_1399 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal result_V_reg_1414 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal r_V_fu_880_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal r_V_reg_1419 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_scaled_fixed2ieee_fu_268_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal resultf_reg_1424 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal grp_scaled_fixed2ieee_fu_268_ap_idle : STD_LOGIC;
    signal grp_scaled_fixed2ieee_fu_268_ap_ready : STD_LOGIC;
    signal grp_scaled_fixed2ieee_fu_268_ap_done : STD_LOGIC;
    signal grp_scaled_fixed2ieee_fu_268_ap_start : STD_LOGIC;
    signal grp_scaled_fixed2ieee_fu_268_ap_start_reg : STD_LOGIC := '0';
    signal tmp_2_i_i_fu_330_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_s_fu_274_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal expv_op_fu_306_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal addr_V_fu_312_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Result_i_i_fu_320_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_4_i_i_fu_339_p1 : STD_LOGIC_VECTOR (255 downto 0);
    signal r_V_4_fu_342_p2 : STD_LOGIC_VECTOR (255 downto 0);
    signal p_Result_20_fu_358_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal grp_fu_372_p0 : STD_LOGIC_VECTOR (169 downto 0);
    signal grp_fu_372_p1 : STD_LOGIC_VECTOR (52 downto 0);
    signal grp_fu_372_p2 : STD_LOGIC_VECTOR (222 downto 0);
    signal tmp_14_fu_409_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_i_fu_413_p2 : STD_LOGIC_VECTOR (123 downto 0);
    signal tmp_i_fu_435_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Result_21_fu_447_p3 : STD_LOGIC_VECTOR (61 downto 0);
    signal p_Result_22_fu_454_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal p_Result_23_fu_464_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i3_i_fu_472_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal Mx_zeros_V_fu_480_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_15_i_fu_484_p1 : STD_LOGIC_VECTOR (123 downto 0);
    signal p_Val2_13_fu_488_p2 : STD_LOGIC_VECTOR (123 downto 0);
    signal storemerge_i_fu_440_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_18_i_fu_503_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sh_cast_fu_531_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_20_i_fu_534_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_fu_540_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_2_cast_fu_547_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_i_fu_551_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_22_i_fu_555_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_23_i_fu_560_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal p_Val2_14_fu_565_p3 : STD_LOGIC_VECTOR (62 downto 0);
    signal grp_fu_620_p0 : STD_LOGIC_VECTOR (48 downto 0);
    signal grp_fu_620_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal not_do_cos_i_fu_626_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal sin_basis_fu_632_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_24_fu_638_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_620_p2 : STD_LOGIC_VECTOR (97 downto 0);
    signal grp_fu_664_p0 : STD_LOGIC_VECTOR (48 downto 0);
    signal grp_fu_664_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal grp_fu_669_p0 : STD_LOGIC_VECTOR (48 downto 0);
    signal grp_fu_669_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal grp_fu_681_p0 : STD_LOGIC_VECTOR (55 downto 0);
    signal grp_fu_693_p0 : STD_LOGIC_VECTOR (48 downto 0);
    signal grp_fu_664_p2 : STD_LOGIC_VECTOR (97 downto 0);
    signal grp_fu_669_p2 : STD_LOGIC_VECTOR (97 downto 0);
    signal grp_fu_681_p2 : STD_LOGIC_VECTOR (107 downto 0);
    signal grp_fu_693_p2 : STD_LOGIC_VECTOR (92 downto 0);
    signal grp_fu_752_p0 : STD_LOGIC_VECTOR (41 downto 0);
    signal grp_fu_752_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_Val2_4_fu_764_p0 : STD_LOGIC_VECTOR (34 downto 0);
    signal p_Val2_4_fu_764_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal p_Val2_4_fu_764_p2 : STD_LOGIC_VECTOR (59 downto 0);
    signal p_Val2_20_fu_739_p3 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_32_i_fu_780_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_33_i_fu_784_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_21_fu_787_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_35_i_cast_fu_793_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_752_p2 : STD_LOGIC_VECTOR (74 downto 0);
    signal cos_basis_fu_817_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_812_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_37_i_cast_fu_823_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_23_fu_826_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_39_i_cast_fu_831_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal Mx_V_read_assign_fu_840_p3 : STD_LOGIC_VECTOR (62 downto 0);
    signal grp_fu_853_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal grp_fu_853_p2 : STD_LOGIC_VECTOR (125 downto 0);
    signal p_Ex_V_ret_fu_859_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal rhs_V_fu_876_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal p_Val2_25_fu_887_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_26_fu_912_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_3_fu_918_p18 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_956_p18 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_cast_cast_fu_1009_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_994_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_1021_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_tmp_s_fu_1016_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_25_fu_890_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal loc_V_2_fu_898_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal or_cond_fu_1001_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_fu_1005_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_39_fu_1026_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_cast_cast_fu_1009_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Result_s_40_fu_1034_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal not_or_cond_demorgan_fu_1057_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_or_cond_fu_1061_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_1075_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_1_cast_fu_1067_p3 : STD_LOGIC_VECTOR (51 downto 0);
    signal loc_V_3_fu_908_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal p_Result_s_41_fu_1041_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_6_fu_1049_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal ret_V_7_fu_1080_p3 : STD_LOGIC_VECTOR (51 downto 0);
    signal p_Result_27_fu_1088_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_372_p00 : STD_LOGIC_VECTOR (222 downto 0);
    signal grp_fu_372_p10 : STD_LOGIC_VECTOR (222 downto 0);
    signal grp_fu_681_p00 : STD_LOGIC_VECTOR (107 downto 0);
    signal grp_fu_693_p00 : STD_LOGIC_VECTOR (92 downto 0);
    signal grp_fu_752_p00 : STD_LOGIC_VECTOR (74 downto 0);
    signal grp_fu_752_p10 : STD_LOGIC_VECTOR (74 downto 0);
    signal grp_fu_853_p10 : STD_LOGIC_VECTOR (125 downto 0);
    signal p_Val2_4_fu_764_p00 : STD_LOGIC_VECTOR (59 downto 0);
    signal p_Val2_4_fu_764_p10 : STD_LOGIC_VECTOR (59 downto 0);

    component scaled_fixed2ieee IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_V : IN STD_LOGIC_VECTOR (62 downto 0);
        prescale : IN STD_LOGIC_VECTOR (11 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component dft_mul_170ns_53nhbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (169 downto 0);
        din1 : IN STD_LOGIC_VECTOR (52 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (222 downto 0) );
    end component;


    component dft_mux_83_1_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (0 downto 0);
        din1 : IN STD_LOGIC_VECTOR (0 downto 0);
        din2 : IN STD_LOGIC_VECTOR (0 downto 0);
        din3 : IN STD_LOGIC_VECTOR (0 downto 0);
        din4 : IN STD_LOGIC_VECTOR (0 downto 0);
        din5 : IN STD_LOGIC_VECTOR (0 downto 0);
        din6 : IN STD_LOGIC_VECTOR (0 downto 0);
        din7 : IN STD_LOGIC_VECTOR (0 downto 0);
        din8 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component dft_mul_49ns_49nsibs IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (48 downto 0);
        din1 : IN STD_LOGIC_VECTOR (48 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (97 downto 0) );
    end component;


    component dft_mul_56ns_52s_jbC IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (55 downto 0);
        din1 : IN STD_LOGIC_VECTOR (51 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (107 downto 0) );
    end component;


    component dft_mul_49ns_44s_kbM IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (48 downto 0);
        din1 : IN STD_LOGIC_VECTOR (43 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (92 downto 0) );
    end component;


    component dft_mul_42ns_33nslbW IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (41 downto 0);
        din1 : IN STD_LOGIC_VECTOR (32 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (74 downto 0) );
    end component;


    component dft_mul_64s_63ns_mb6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (62 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (125 downto 0) );
    end component;


    component dft_mux_164_1_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (0 downto 0);
        din1 : IN STD_LOGIC_VECTOR (0 downto 0);
        din2 : IN STD_LOGIC_VECTOR (0 downto 0);
        din3 : IN STD_LOGIC_VECTOR (0 downto 0);
        din4 : IN STD_LOGIC_VECTOR (0 downto 0);
        din5 : IN STD_LOGIC_VECTOR (0 downto 0);
        din6 : IN STD_LOGIC_VECTOR (0 downto 0);
        din7 : IN STD_LOGIC_VECTOR (0 downto 0);
        din8 : IN STD_LOGIC_VECTOR (0 downto 0);
        din9 : IN STD_LOGIC_VECTOR (0 downto 0);
        din10 : IN STD_LOGIC_VECTOR (0 downto 0);
        din11 : IN STD_LOGIC_VECTOR (0 downto 0);
        din12 : IN STD_LOGIC_VECTOR (0 downto 0);
        din13 : IN STD_LOGIC_VECTOR (0 downto 0);
        din14 : IN STD_LOGIC_VECTOR (0 downto 0);
        din15 : IN STD_LOGIC_VECTOR (0 downto 0);
        din16 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component sin_or_cos_doublebkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (255 downto 0) );
    end component;


    component sin_or_cos_doublecud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (58 downto 0) );
    end component;


    component sin_or_cos_doubledEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (51 downto 0) );
    end component;


    component sin_or_cos_doubleeOg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (43 downto 0) );
    end component;


    component sin_or_cos_doublefYi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (32 downto 0) );
    end component;


    component sin_or_cos_doubleg8j IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (24 downto 0) );
    end component;



begin
    ref_4oPi_table_256_V_U : component sin_or_cos_doublebkb
    generic map (
        DataWidth => 256,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ref_4oPi_table_256_V_address0,
        ce0 => ref_4oPi_table_256_V_ce0,
        q0 => ref_4oPi_table_256_V_q0);

    fourth_order_double_4_U : component sin_or_cos_doublecud
    generic map (
        DataWidth => 59,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fourth_order_double_4_address0,
        ce0 => fourth_order_double_4_ce0,
        q0 => fourth_order_double_4_q0);

    fourth_order_double_5_U : component sin_or_cos_doubledEe
    generic map (
        DataWidth => 52,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fourth_order_double_5_address0,
        ce0 => fourth_order_double_5_ce0,
        q0 => fourth_order_double_5_q0);

    fourth_order_double_6_U : component sin_or_cos_doubleeOg
    generic map (
        DataWidth => 44,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fourth_order_double_6_address0,
        ce0 => fourth_order_double_6_ce0,
        q0 => fourth_order_double_6_q0);

    fourth_order_double_7_U : component sin_or_cos_doublefYi
    generic map (
        DataWidth => 33,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fourth_order_double_7_address0,
        ce0 => fourth_order_double_7_ce0,
        q0 => fourth_order_double_7_q0);

    fourth_order_double_s_U : component sin_or_cos_doubleg8j
    generic map (
        DataWidth => 25,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fourth_order_double_s_address0,
        ce0 => fourth_order_double_s_ce0,
        q0 => fourth_order_double_s_q0);

    grp_scaled_fixed2ieee_fu_268 : component scaled_fixed2ieee
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_scaled_fixed2ieee_fu_268_ap_start,
        ap_done => grp_scaled_fixed2ieee_fu_268_ap_done,
        ap_idle => grp_scaled_fixed2ieee_fu_268_ap_idle,
        ap_ready => grp_scaled_fixed2ieee_fu_268_ap_ready,
        in_V => result_V_reg_1414,
        prescale => r_V_reg_1419,
        ap_return => grp_scaled_fixed2ieee_fu_268_ap_return);

    dft_mul_170ns_53nhbi_U6 : component dft_mul_170ns_53nhbi
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 170,
        din1_WIDTH => 53,
        dout_WIDTH => 223)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_372_p0,
        din1 => grp_fu_372_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_372_p2);

    dft_mux_83_1_1_1_U7 : component dft_mux_83_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 3,
        dout_WIDTH => 1)
    port map (
        din0 => ap_const_lv1_0,
        din1 => ap_const_lv1_1,
        din2 => ap_const_lv1_1,
        din3 => ap_const_lv1_0,
        din4 => ap_const_lv1_0,
        din5 => ap_const_lv1_1,
        din6 => ap_const_lv1_1,
        din7 => ap_const_lv1_0,
        din8 => p_Val2_29_reg_1169,
        dout => tmp_fu_596_p10);

    dft_mul_49ns_49nsibs_U8 : component dft_mul_49ns_49nsibs
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 49,
        din1_WIDTH => 49,
        dout_WIDTH => 98)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_620_p0,
        din1 => grp_fu_620_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_620_p2);

    dft_mul_49ns_49nsibs_U9 : component dft_mul_49ns_49nsibs
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 49,
        din1_WIDTH => 49,
        dout_WIDTH => 98)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_664_p0,
        din1 => grp_fu_664_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_664_p2);

    dft_mul_49ns_49nsibs_U10 : component dft_mul_49ns_49nsibs
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 49,
        din1_WIDTH => 49,
        dout_WIDTH => 98)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_669_p0,
        din1 => grp_fu_669_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_669_p2);

    dft_mul_56ns_52s_jbC_U11 : component dft_mul_56ns_52s_jbC
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 56,
        din1_WIDTH => 52,
        dout_WIDTH => 108)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_681_p0,
        din1 => fourth_order_double_10_reg_1280,
        ce => ap_const_logic_1,
        dout => grp_fu_681_p2);

    dft_mul_49ns_44s_kbM_U12 : component dft_mul_49ns_44s_kbM
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 49,
        din1_WIDTH => 44,
        dout_WIDTH => 93)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_693_p0,
        din1 => fourth_order_double_12_reg_1285,
        ce => ap_const_logic_1,
        dout => grp_fu_693_p2);

    dft_mul_42ns_33nslbW_U13 : component dft_mul_42ns_33nslbW
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 42,
        din1_WIDTH => 33,
        dout_WIDTH => 75)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_752_p0,
        din1 => grp_fu_752_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_752_p2);

    dft_mul_64s_63ns_mb6_U14 : component dft_mul_64s_63ns_mb6
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 63,
        dout_WIDTH => 126)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => r_V_3_reg_1399,
        din1 => grp_fu_853_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_853_p2);

    dft_mux_164_1_1_1_U15 : component dft_mux_164_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 1,
        din9_WIDTH => 1,
        din10_WIDTH => 1,
        din11_WIDTH => 1,
        din12_WIDTH => 1,
        din13_WIDTH => 1,
        din14_WIDTH => 1,
        din15_WIDTH => 1,
        din16_WIDTH => 4,
        dout_WIDTH => 1)
    port map (
        din0 => ap_const_lv1_0,
        din1 => ap_const_lv1_0,
        din2 => ap_const_lv1_0,
        din3 => ap_const_lv1_1,
        din4 => ap_const_lv1_1,
        din5 => ap_const_lv1_1,
        din6 => ap_const_lv1_1,
        din7 => ap_const_lv1_0,
        din8 => ap_const_lv1_0,
        din9 => ap_const_lv1_1,
        din10 => ap_const_lv1_1,
        din11 => ap_const_lv1_1,
        din12 => ap_const_lv1_1,
        din13 => ap_const_lv1_0,
        din14 => ap_const_lv1_0,
        din15 => ap_const_lv1_0,
        din16 => p_Result_26_fu_912_p3,
        dout => tmp_3_fu_918_p18);

    dft_mux_164_1_1_1_U16 : component dft_mux_164_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 1,
        din9_WIDTH => 1,
        din10_WIDTH => 1,
        din11_WIDTH => 1,
        din12_WIDTH => 1,
        din13_WIDTH => 1,
        din14_WIDTH => 1,
        din15_WIDTH => 1,
        din16_WIDTH => 4,
        dout_WIDTH => 1)
    port map (
        din0 => ap_const_lv1_0,
        din1 => ap_const_lv1_0,
        din2 => ap_const_lv1_1,
        din3 => ap_const_lv1_0,
        din4 => ap_const_lv1_1,
        din5 => ap_const_lv1_1,
        din6 => ap_const_lv1_0,
        din7 => ap_const_lv1_1,
        din8 => ap_const_lv1_1,
        din9 => ap_const_lv1_0,
        din10 => ap_const_lv1_1,
        din11 => ap_const_lv1_1,
        din12 => ap_const_lv1_0,
        din13 => ap_const_lv1_1,
        din14 => ap_const_lv1_0,
        din15 => ap_const_lv1_0,
        din16 => p_Result_26_fu_912_p3,
        dout => tmp_4_fu_956_p18);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_scaled_fixed2ieee_fu_268_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_scaled_fixed2ieee_fu_268_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                    grp_scaled_fixed2ieee_fu_268_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_scaled_fixed2ieee_fu_268_ap_ready = ap_const_logic_1)) then 
                    grp_scaled_fixed2ieee_fu_268_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                Ex_V_reg_1192 <= Ex_V_fu_507_p2;
                Mx_V_reg_1185 <= p_Val2_13_fu_488_p2(123 downto 61);
                isNeg_reg_1198 <= Ex_V_fu_507_p2(10 downto 10);
                tmp_6_reg_1204 <= tmp_6_fu_521_p2;
                tmp_8_reg_1210 <= tmp_8_fu_526_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                    OP1_V_reg_1245(48 downto 0) <= OP1_V_fu_617_p1(48 downto 0);
                not_do_cos_i_reg_1252 <= not_do_cos_i_fu_626_p2;
                    tmp_30_i_reg_1257(7 downto 0) <= tmp_30_i_fu_645_p1(7 downto 0);
                tmp_reg_1239 <= tmp_fu_596_p10;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                closepath_reg_1121 <= closepath_fu_300_p2;
                loc_V_1_reg_1115 <= loc_V_1_fu_296_p1;
                loc_V_reg_1108 <= p_Val2_s_fu_274_p1(62 downto 52);
                p_Result_19_reg_1102 <= p_Val2_s_fu_274_p1(63 downto 63);
                tmp_13_reg_1132 <= tmp_13_fu_335_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                cos_basis_reg_1392 <= cos_basis_fu_817_p3;
                r_V_3_reg_1399 <= r_V_3_fu_834_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                fourth_order_double_10_reg_1280 <= fourth_order_double_5_q0;
                fourth_order_double_12_reg_1285 <= fourth_order_double_6_q0;
                tmp_25_i_reg_1274 <= grp_fu_620_p2(97 downto 49);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                fourth_order_double_14_reg_1357 <= fourth_order_double_7_q0;
                fourth_order_double_16_reg_1362 <= fourth_order_double_s_q0;
                p_Val2_19_reg_1342 <= fourth_order_double_4_q0;
                tmp_12_i_reg_1347 <= grp_fu_681_p2(107 downto 52);
                tmp_14_i1_reg_1352 <= grp_fu_693_p2(92 downto 45);
                tmp_27_i_reg_1332 <= grp_fu_664_p2(97 downto 56);
                tmp_29_i_reg_1337 <= grp_fu_669_p2(97 downto 63);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                p_Result_i2_i_reg_1180 <= p_Val2_11_fu_418_p3(123 downto 63);
                p_Val2_11_reg_1175 <= p_Val2_11_fu_418_p3;
                p_Val2_29_reg_1169 <= p_Val2_29_fu_403_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                p_Result_i_reg_1218 <= p_Val2_14_fu_565_p3(62 downto 56);
                p_Val2_15_reg_1223 <= p_Val2_15_fu_582_p1;
                tmp_i1_reg_1228 <= p_Val2_14_fu_565_p3(55 downto 7);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                p_Val2_22_reg_1382 <= p_Val2_22_fu_796_p2;
                tmp_2_reg_1377 <= p_Val2_4_fu_764_p2(59 downto 31);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                p_Val2_8_reg_1158 <= grp_fu_372_p2(166 downto 43);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                r_V_reg_1419 <= r_V_fu_880_p2;
                result_V_reg_1414 <= grp_fu_853_p2(125 downto 63);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_scaled_fixed2ieee_fu_268_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then
                resultf_reg_1424 <= grp_scaled_fixed2ieee_fu_268_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                ret_V_reg_1137 <= r_V_4_fu_342_p2(255 downto 86);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((closepath_reg_1121 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                tmp_14_i_reg_1164 <= grp_fu_372_p2(169 downto 167);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                tmp_1_reg_1387 <= grp_fu_752_p2(74 downto 38);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                tmp_7_reg_1152 <= tmp_7_fu_378_p2;
            end if;
        end if;
    end process;
    OP1_V_reg_1245(97 downto 49) <= "0000000000000000000000000000000000000000000000000";
    tmp_30_i_reg_1257(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state23, grp_scaled_fixed2ieee_fu_268_ap_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                if (((grp_scaled_fixed2ieee_fu_268_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    Ex_V_fu_507_p2 <= std_logic_vector(unsigned(storemerge_i_fu_440_p3) - unsigned(tmp_18_i_fu_503_p1));
    Mx_V_read_assign_fu_840_p3 <= 
        ap_const_lv63_7FFFFFFFFFFFFFFF when (cos_basis_reg_1392(0) = '1') else 
        Mx_V_reg_1185;
    Mx_zeros_V_fu_480_p1 <= tmp_i3_i_fu_472_p3(6 - 1 downto 0);
    OP1_V_fu_617_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_i1_reg_1228),98));
    OP2_V_fu_661_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_25_i_reg_1274),98));
    addr_V_fu_312_p3 <= 
        ap_const_lv11_4A when (closepath_fu_300_p2(0) = '1') else 
        expv_op_fu_306_p2;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state24)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= p_Result_27_fu_1088_p4;
    closepath_fu_300_p2 <= "1" when (unsigned(loc_V_fu_286_p4) < unsigned(ap_const_lv11_3FE)) else "0";
    cos_basis_fu_817_p0 <= (0=>do_cos, others=>'-');
    cos_basis_fu_817_p3 <= 
        tmp_s_fu_812_p2 when (cos_basis_fu_817_p0(0) = '1') else 
        tmp_reg_1239;
    expv_op_fu_306_p2 <= std_logic_vector(signed(ap_const_lv11_44D) + signed(loc_V_fu_286_p4));
    fourth_order_double_4_address0 <= tmp_30_i_reg_1257(8 - 1 downto 0);

    fourth_order_double_4_ce0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            fourth_order_double_4_ce0 <= ap_const_logic_1;
        else 
            fourth_order_double_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    fourth_order_double_5_address0 <= tmp_30_i_fu_645_p1(8 - 1 downto 0);

    fourth_order_double_5_ce0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            fourth_order_double_5_ce0 <= ap_const_logic_1;
        else 
            fourth_order_double_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    fourth_order_double_6_address0 <= tmp_30_i_fu_645_p1(8 - 1 downto 0);

    fourth_order_double_6_ce0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            fourth_order_double_6_ce0 <= ap_const_logic_1;
        else 
            fourth_order_double_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    fourth_order_double_7_address0 <= tmp_30_i_reg_1257(8 - 1 downto 0);

    fourth_order_double_7_ce0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            fourth_order_double_7_ce0 <= ap_const_logic_1;
        else 
            fourth_order_double_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    fourth_order_double_s_address0 <= tmp_30_i_reg_1257(8 - 1 downto 0);

    fourth_order_double_s_ce0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            fourth_order_double_s_ce0 <= ap_const_logic_1;
        else 
            fourth_order_double_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_372_p0 <= grp_fu_372_p00(170 - 1 downto 0);
    grp_fu_372_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_reg_1137),223));
    grp_fu_372_p1 <= grp_fu_372_p10(53 - 1 downto 0);
    grp_fu_372_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_20_fu_358_p3),223));
    grp_fu_620_p0 <= OP1_V_fu_617_p1(49 - 1 downto 0);
    grp_fu_620_p1 <= OP1_V_fu_617_p1(49 - 1 downto 0);
    grp_fu_664_p0 <= OP2_V_fu_661_p1(49 - 1 downto 0);
    grp_fu_664_p1 <= OP1_V_reg_1245(49 - 1 downto 0);
    grp_fu_669_p0 <= OP2_V_fu_661_p1(49 - 1 downto 0);
    grp_fu_669_p1 <= OP2_V_fu_661_p1(49 - 1 downto 0);
    grp_fu_681_p0 <= grp_fu_681_p00(56 - 1 downto 0);
    grp_fu_681_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_15_reg_1223),108));
    grp_fu_693_p0 <= grp_fu_693_p00(49 - 1 downto 0);
    grp_fu_693_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_25_i_reg_1274),93));
    grp_fu_752_p0 <= grp_fu_752_p00(42 - 1 downto 0);
    grp_fu_752_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_27_i_reg_1332),75));
    grp_fu_752_p1 <= grp_fu_752_p10(33 - 1 downto 0);
    grp_fu_752_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(fourth_order_double_14_reg_1357),75));
    grp_fu_853_p1 <= grp_fu_853_p10(63 - 1 downto 0);
    grp_fu_853_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Mx_V_read_assign_fu_840_p3),126));
    grp_scaled_fixed2ieee_fu_268_ap_start <= grp_scaled_fixed2ieee_fu_268_ap_start_reg;
    loc_V_1_fu_296_p1 <= p_Val2_s_fu_274_p1(52 - 1 downto 0);
    loc_V_2_fu_898_p4 <= p_Val2_25_fu_887_p1(62 downto 52);
    loc_V_3_fu_908_p1 <= p_Val2_25_fu_887_p1(52 - 1 downto 0);
    loc_V_fu_286_p4 <= p_Val2_s_fu_274_p1(62 downto 52);
    not_do_cos_i_fu_626_p0 <= (0=>do_cos, others=>'-');
    not_do_cos_i_fu_626_p2 <= (not_do_cos_i_fu_626_p0 xor ap_const_lv1_1);
    not_or_cond_demorgan_fu_1057_p2 <= (tmp_7_reg_1152 and tmp_6_reg_1204);
    not_or_cond_fu_1061_p2 <= (not_or_cond_demorgan_fu_1057_p2 xor ap_const_lv1_1);
    not_tmp_s_fu_1016_p2 <= (tmp_8_reg_1210 xor ap_const_lv1_1);
    or_cond_fu_1001_p2 <= (tmp_7_reg_1152 and tmp_6_reg_1204);
    p_Ex_V_ret_fu_859_p3 <= 
        ap_const_lv11_0 when (cos_basis_reg_1392(0) = '1') else 
        Ex_V_reg_1192;
    p_Result_1_cast_fu_1067_p3 <= 
        ap_const_lv52_FFFFFFFFFFFFF when (not_or_cond_fu_1061_p2(0) = '1') else 
        ap_const_lv52_0;
    p_Result_20_fu_358_p3 <= (ap_const_lv1_1 & loc_V_1_reg_1115);
    p_Result_21_fu_447_p3 <= (p_Result_i2_i_reg_1180 & ap_const_lv1_1);
    
    p_Result_22_fu_454_p4_proc : process(p_Result_21_fu_447_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(62+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(62+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(62 - 1 downto 0);
    variable p_Result_22_fu_454_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(62 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(62 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(62 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(6 - 1 downto 0) := ap_const_lv32_3D(6 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(6 - 1 downto 0) := ap_const_lv32_0(6 - 1 downto 0);
        v0_cpy := p_Result_21_fu_447_p3;
        if (vlo_cpy(6 - 1 downto 0) > vhi_cpy(6 - 1 downto 0)) then
            vhi_cpy(6-1 downto 0) := std_logic_vector(62-1-unsigned(ap_const_lv32_0(6-1 downto 0)));
            vlo_cpy(6-1 downto 0) := std_logic_vector(62-1-unsigned(ap_const_lv32_3D(6-1 downto 0)));
            for p_Result_22_fu_454_p4_i in 0 to 62-1 loop
                v0_cpy(p_Result_22_fu_454_p4_i) := p_Result_21_fu_447_p3(62-1-p_Result_22_fu_454_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(6-1 downto 0)))));

        section := (others=>'0');
        section(6-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(6-1 downto 0)) - unsigned(vlo_cpy(6-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(62-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_22_fu_454_p4 <= resvalue(62-1 downto 0);
    end process;

    p_Result_23_fu_464_p3 <= (ap_const_lv2_3 & p_Result_22_fu_454_p4);
    p_Result_24_fu_638_p3 <= (sin_basis_fu_632_p2 & p_Result_i_reg_1218);
    p_Result_25_fu_890_p3 <= p_Val2_25_fu_887_p1(63 downto 63);
    p_Result_26_fu_912_p3 <= (p_Result_19_reg_1102 & p_Val2_29_reg_1169);
    p_Result_27_fu_1088_p4 <= ((p_Result_s_41_fu_1041_p3 & ret_V_6_fu_1049_p3) & ret_V_7_fu_1080_p3);
    p_Result_i_i_fu_320_p4 <= addr_V_fu_312_p3(10 downto 7);
    p_Result_s_39_fu_1026_p3 <= 
        not_tmp_s_fu_1016_p2 when (tmp_9_fu_1021_p2(0) = '1') else 
        p_Result_25_fu_890_p3;
    p_Result_s_40_fu_1034_p3 <= 
        ap_const_lv11_7FF when (tmp_8_reg_1210(0) = '1') else 
        loc_V_2_fu_898_p4;
    p_Result_s_41_fu_1041_p3 <= 
        p_Result_s_fu_1005_p2 when (or_cond_fu_1001_p2(0) = '1') else 
        p_Result_s_39_fu_1026_p3;
    p_Result_s_fu_1005_p2 <= (p_Result_19_reg_1102 and not_do_cos_i_reg_1252);
    p_Val2_11_fu_418_p3 <= 
        p_Val2_i_fu_413_p2 when (tmp_14_fu_409_p1(0) = '1') else 
        p_Val2_8_reg_1158;
    p_Val2_13_fu_488_p2 <= std_logic_vector(shift_left(unsigned(p_Val2_11_reg_1175),to_integer(unsigned('0' & tmp_15_i_fu_484_p1(31-1 downto 0)))));
    p_Val2_14_fu_565_p3 <= 
        tmp_22_i_fu_555_p2 when (isNeg_reg_1198(0) = '1') else 
        tmp_23_i_fu_560_p2;
    p_Val2_15_fu_582_p1 <= p_Val2_14_fu_565_p3(56 - 1 downto 0);
    p_Val2_20_fu_739_p3 <= (p_Val2_19_reg_1342 & ap_const_lv4_0);
    p_Val2_21_fu_787_p2 <= std_logic_vector(signed(tmp_32_i_fu_780_p1) + signed(tmp_33_i_fu_784_p1));
    p_Val2_22_fu_796_p2 <= std_logic_vector(unsigned(p_Val2_21_fu_787_p2) + unsigned(tmp_35_i_cast_fu_793_p1));
    p_Val2_23_fu_826_p2 <= std_logic_vector(unsigned(p_Val2_22_reg_1382) + unsigned(tmp_37_i_cast_fu_823_p1));
    p_Val2_25_fu_887_p1 <= resultf_reg_1424;
    p_Val2_29_fu_403_p3 <= 
        ap_const_lv3_0 when (closepath_reg_1121(0) = '1') else 
        tmp_14_i_reg_1164;
    p_Val2_4_fu_764_p0 <= p_Val2_4_fu_764_p00(35 - 1 downto 0);
    p_Val2_4_fu_764_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_29_i_reg_1337),60));
    p_Val2_4_fu_764_p1 <= p_Val2_4_fu_764_p10(25 - 1 downto 0);
    p_Val2_4_fu_764_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(fourth_order_double_16_reg_1362),60));
    p_Val2_4_fu_764_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_4_fu_764_p0) * unsigned(p_Val2_4_fu_764_p1), 60));
    p_Val2_i_fu_413_p2 <= std_logic_vector(unsigned(ap_const_lv124_0) - unsigned(p_Val2_8_reg_1158));
    p_Val2_s_fu_274_p1 <= t_in;
    p_cast_cast_fu_1009_p0 <= (0=>do_cos, others=>'-');
    p_cast_cast_fu_1009_p3 <= 
        ap_const_lv11_3FF when (p_cast_cast_fu_1009_p0(0) = '1') else 
        ap_const_lv11_0;
    r_V_3_fu_834_p2 <= std_logic_vector(unsigned(p_Val2_23_fu_826_p2) + unsigned(tmp_39_i_cast_fu_831_p1));
    r_V_4_fu_342_p2 <= std_logic_vector(shift_left(unsigned(ref_4oPi_table_256_V_q0),to_integer(unsigned('0' & tmp_4_i_i_fu_339_p1(31-1 downto 0)))));
    r_V_fu_880_p2 <= std_logic_vector(unsigned(ap_const_lv12_0) - unsigned(rhs_V_fu_876_p1));
    ref_4oPi_table_256_V_address0 <= tmp_2_i_i_fu_330_p1(4 - 1 downto 0);

    ref_4oPi_table_256_V_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ref_4oPi_table_256_V_ce0 <= ap_const_logic_1;
        else 
            ref_4oPi_table_256_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ret_V_6_fu_1049_p3 <= 
        p_cast_cast_fu_1009_p3 when (or_cond_fu_1001_p2(0) = '1') else 
        p_Result_s_40_fu_1034_p3;
    ret_V_7_fu_1080_p3 <= 
        p_Result_1_cast_fu_1067_p3 when (tmp_10_fu_1075_p2(0) = '1') else 
        loc_V_3_fu_908_p1;
        rhs_V_fu_876_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Ex_V_ret_fu_859_p3),12));

        sh_assign_2_cast_fu_547_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_assign_fu_540_p3),32));

    sh_assign_fu_540_p3 <= 
        tmp_20_i_fu_534_p2 when (isNeg_reg_1198(0) = '1') else 
        sh_cast_fu_531_p1;
        sh_cast_fu_531_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(Ex_V_reg_1192),12));

    sin_basis_fu_632_p2 <= (tmp_fu_596_p10 xor not_do_cos_i_fu_626_p2);
    storemerge_i_fu_440_p3 <= 
        tmp_i_fu_435_p2 when (closepath_reg_1121(0) = '1') else 
        ap_const_lv11_0;
    tmp_10_fu_1075_p2 <= (tmp_8_reg_1210 or or_cond_fu_1001_p2);
    tmp_13_fu_335_p1 <= addr_V_fu_312_p3(7 - 1 downto 0);
    tmp_14_fu_409_p1 <= p_Val2_29_fu_403_p3(1 - 1 downto 0);
    tmp_15_i_fu_484_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Mx_zeros_V_fu_480_p1),124));
    tmp_18_i_fu_503_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Mx_zeros_V_fu_480_p1),11));
    tmp_20_i_fu_534_p2 <= std_logic_vector(unsigned(ap_const_lv12_0) - unsigned(sh_cast_fu_531_p1));
    tmp_21_i_fu_551_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_2_cast_fu_547_p1),63));
    tmp_22_i_fu_555_p2 <= std_logic_vector(shift_right(unsigned(Mx_V_reg_1185),to_integer(unsigned('0' & tmp_21_i_fu_551_p1(31-1 downto 0)))));
    tmp_23_i_fu_560_p2 <= std_logic_vector(shift_left(unsigned(Mx_V_reg_1185),to_integer(unsigned('0' & tmp_21_i_fu_551_p1(31-1 downto 0)))));
    tmp_2_i_i_fu_330_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_i_i_fu_320_p4),64));
    tmp_30_i_fu_645_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_24_fu_638_p3),64));
        tmp_32_i_fu_780_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_20_fu_739_p3),64));

        tmp_33_i_fu_784_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_12_i_reg_1347),64));

        tmp_35_i_cast_fu_793_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_14_i1_reg_1352),64));

    tmp_37_i_cast_fu_823_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_reg_1387),64));
    tmp_39_i_cast_fu_831_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_reg_1377),64));
    tmp_4_i_i_fu_339_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_reg_1132),256));
    tmp_5_fu_994_p3 <= 
        tmp_3_fu_918_p18 when (cos_basis_reg_1392(0) = '1') else 
        tmp_4_fu_956_p18;
    tmp_6_fu_521_p2 <= "1" when (loc_V_reg_1108 = ap_const_lv11_0) else "0";
    tmp_7_fu_378_p2 <= "1" when (loc_V_1_reg_1115 = ap_const_lv52_0) else "0";
    tmp_8_fu_526_p2 <= "1" when (loc_V_reg_1108 = ap_const_lv11_7FF) else "0";
    tmp_9_fu_1021_p2 <= (tmp_8_reg_1210 or tmp_5_fu_994_p3);
    
    tmp_i3_i_fu_472_p3_proc : process(p_Result_23_fu_464_p3)
    begin
        tmp_i3_i_fu_472_p3 <= std_logic_vector(to_unsigned(64, 64));
        for i in 0 to 64 - 1 loop
            if p_Result_23_fu_464_p3(i) = '1' then
                tmp_i3_i_fu_472_p3 <= std_logic_vector(to_unsigned(i,64));
                exit;
            end if;
        end loop;
    end process;

    tmp_i_fu_435_p2 <= std_logic_vector(signed(ap_const_lv11_403) + signed(loc_V_reg_1108));
    tmp_s_fu_812_p2 <= (tmp_reg_1239 xor ap_const_lv1_1);
end behav;
