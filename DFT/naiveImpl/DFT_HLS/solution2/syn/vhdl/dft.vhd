-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dft is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    sample_real_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    sample_real_ce0 : OUT STD_LOGIC;
    sample_real_we0 : OUT STD_LOGIC;
    sample_real_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    sample_real_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    sample_imag_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    sample_imag_ce0 : OUT STD_LOGIC;
    sample_imag_we0 : OUT STD_LOGIC;
    sample_imag_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    sample_imag_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of dft is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "dft,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xa7a100tcsg324-1i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.573000,HLS_SYN_LAT=4853762,HLS_SYN_TPT=none,HLS_SYN_MEM=18,HLS_SYN_DSP=199,HLS_SYN_FF=12531,HLS_SYN_LUT=18213,HLS_VERSION=2018_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (43 downto 0) := "00000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (43 downto 0) := "00000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (43 downto 0) := "00000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (43 downto 0) := "00000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (43 downto 0) := "00000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (43 downto 0) := "00000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (43 downto 0) := "00001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (43 downto 0) := "00010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (43 downto 0) := "00100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (43 downto 0) := "01000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (43 downto 0) := "10000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv64_3F9921FB5444261E : STD_LOGIC_VECTOR (63 downto 0) := "0011111110011001001000011111101101010100010001000010011000011110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_fu_261_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_278 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal grp_fu_270_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_284 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal grp_fu_245_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_291 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal grp_fu_235_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_297 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal grp_fu_239_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_304 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_5_fu_317_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_5_reg_378 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_30_fu_323_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_311_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_273_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_13_reg_388 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal temp_real_addr_reg_393 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal temp_imag_addr_reg_398 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_264_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_reg_403 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_1_fu_340_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_1_reg_411 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal tmp_31_fu_346_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_fu_334_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_sin_or_cos_double_s_fu_197_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_i_reg_421 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal grp_sin_or_cos_double_s_fu_197_ap_idle : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_197_ap_ready : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_197_ap_done : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_216_ap_idle : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_216_ap_ready : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_216_ap_done : STD_LOGIC;
    signal ap_block_state26_on_subcall_done : BOOLEAN;
    signal grp_sin_or_cos_double_s_fu_216_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_i9_reg_426 : STD_LOGIC_VECTOR (63 downto 0);
    signal c_reg_441 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal s_fu_267_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal s_reg_447 : STD_LOGIC_VECTOR (31 downto 0);
    signal sample_real_load_reg_453 : STD_LOGIC_VECTOR (31 downto 0);
    signal sample_imag_load_reg_459 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_249_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_23_reg_465 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_253_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_26_reg_470 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_257_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_27_reg_475 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_4_fu_363_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_4_reg_483 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal tmp_18_fu_369_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_18_reg_488 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_14_fu_357_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal temp_real_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal temp_real_ce0 : STD_LOGIC;
    signal temp_real_we0 : STD_LOGIC;
    signal temp_real_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_real_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_imag_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal temp_imag_ce0 : STD_LOGIC;
    signal temp_imag_we0 : STD_LOGIC;
    signal temp_imag_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_imag_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sin_or_cos_double_s_fu_197_ap_start : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_197_do_cos : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_216_ap_start : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_216_do_cos : STD_LOGIC;
    signal i_reg_138 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_15_reg_150 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal tmp_16_reg_162 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_reg_174 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_1_reg_186 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal grp_sin_or_cos_double_s_fu_197_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal grp_sin_or_cos_double_s_fu_216_ap_start_reg : STD_LOGIC := '0';
    signal tmp_s_fu_328_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_21_fu_351_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_235_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_235_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal grp_fu_239_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_239_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_245_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_245_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal grp_fu_261_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_264_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_270_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_fu_235_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_239_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (43 downto 0);

    component sin_or_cos_double_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        t_in : IN STD_LOGIC_VECTOR (63 downto 0);
        do_cos : IN STD_LOGIC;
        ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component dft_faddfsub_32nsncg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dft_fmul_32ns_32nocq IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dft_uitofp_32ns_3pcA IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dft_fptrunc_64ns_qcK IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dft_fpext_32ns_64rcU IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component dft_dmul_64ns_64nsc4 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component dft_temp_real IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    temp_real_U : component dft_temp_real
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => temp_real_address0,
        ce0 => temp_real_ce0,
        we0 => temp_real_we0,
        d0 => temp_real_d0,
        q0 => temp_real_q0);

    temp_imag_U : component dft_temp_real
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => temp_imag_address0,
        ce0 => temp_imag_ce0,
        we0 => temp_imag_we0,
        d0 => temp_imag_d0,
        q0 => temp_imag_q0);

    grp_sin_or_cos_double_s_fu_197 : component sin_or_cos_double_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_sin_or_cos_double_s_fu_197_ap_start,
        ap_done => grp_sin_or_cos_double_s_fu_197_ap_done,
        ap_idle => grp_sin_or_cos_double_s_fu_197_ap_idle,
        ap_ready => grp_sin_or_cos_double_s_fu_197_ap_ready,
        t_in => reg_284,
        do_cos => grp_sin_or_cos_double_s_fu_197_do_cos,
        ap_return => grp_sin_or_cos_double_s_fu_197_ap_return);

    grp_sin_or_cos_double_s_fu_216 : component sin_or_cos_double_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_sin_or_cos_double_s_fu_216_ap_start,
        ap_done => grp_sin_or_cos_double_s_fu_216_ap_done,
        ap_idle => grp_sin_or_cos_double_s_fu_216_ap_idle,
        ap_ready => grp_sin_or_cos_double_s_fu_216_ap_ready,
        t_in => reg_284,
        do_cos => grp_sin_or_cos_double_s_fu_216_do_cos,
        ap_return => grp_sin_or_cos_double_s_fu_216_ap_return);

    dft_faddfsub_32nsncg_U34 : component dft_faddfsub_32nsncg
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_235_p0,
        din1 => grp_fu_235_p1,
        opcode => grp_fu_235_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_235_p2);

    dft_faddfsub_32nsncg_U35 : component dft_faddfsub_32nsncg
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_239_p0,
        din1 => grp_fu_239_p1,
        opcode => grp_fu_239_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_239_p2);

    dft_fmul_32ns_32nocq_U36 : component dft_fmul_32ns_32nocq
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_245_p0,
        din1 => grp_fu_245_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_245_p2);

    dft_fmul_32ns_32nocq_U37 : component dft_fmul_32ns_32nocq
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sample_imag_load_reg_459,
        din1 => s_reg_447,
        ce => ap_const_logic_1,
        dout => grp_fu_249_p2);

    dft_fmul_32ns_32nocq_U38 : component dft_fmul_32ns_32nocq
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sample_real_load_reg_453,
        din1 => s_reg_447,
        ce => ap_const_logic_1,
        dout => grp_fu_253_p2);

    dft_fmul_32ns_32nocq_U39 : component dft_fmul_32ns_32nocq
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sample_imag_load_reg_459,
        din1 => c_reg_441,
        ce => ap_const_logic_1,
        dout => grp_fu_257_p2);

    dft_uitofp_32ns_3pcA_U40 : component dft_uitofp_32ns_3pcA
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_261_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_261_p1);

    dft_fptrunc_64ns_qcK_U41 : component dft_fptrunc_64ns_qcK
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        din0 => grp_fu_264_p0,
        dout => grp_fu_264_p1);

    dft_fptrunc_64ns_qcK_U42 : component dft_fptrunc_64ns_qcK
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_i_i9_reg_426,
        dout => s_fu_267_p1);

    dft_fpext_32ns_64rcU_U43 : component dft_fpext_32ns_64rcU
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => grp_fu_270_p0,
        dout => grp_fu_270_p1);

    dft_dmul_64ns_64nsc4_U44 : component dft_dmul_64ns_64nsc4
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_284,
        din1 => ap_const_lv64_3F9921FB5444261E,
        ce => ap_const_logic_1,
        dout => grp_fu_273_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_sin_or_cos_double_s_fu_197_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_sin_or_cos_double_s_fu_197_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                    grp_sin_or_cos_double_s_fu_197_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sin_or_cos_double_s_fu_197_ap_ready = ap_const_logic_1)) then 
                    grp_sin_or_cos_double_s_fu_197_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_sin_or_cos_double_s_fu_216_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_sin_or_cos_double_s_fu_216_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                    grp_sin_or_cos_double_s_fu_216_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sin_or_cos_double_s_fu_216_ap_ready = ap_const_logic_1)) then 
                    grp_sin_or_cos_double_s_fu_216_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_1_reg_186_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_311_p2 = ap_const_lv1_1))) then 
                i_1_reg_186 <= ap_const_lv9_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
                i_1_reg_186 <= i_4_reg_483;
            end if; 
        end if;
    end process;

    i_reg_138_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state15) and (tmp_17_fu_334_p2 = ap_const_lv1_1))) then 
                i_reg_138 <= i_5_reg_378;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_138 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    j_reg_174_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
                j_reg_174 <= j_1_reg_411;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                j_reg_174 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    tmp_15_reg_150_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
                tmp_15_reg_150 <= reg_304;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                tmp_15_reg_150 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    tmp_16_reg_162_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
                tmp_16_reg_162 <= reg_297;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                tmp_16_reg_162 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
                c_reg_441 <= grp_fu_264_p1;
                s_reg_447 <= s_fu_267_p1;
                sample_imag_load_reg_459 <= sample_imag_q0;
                sample_real_load_reg_453 <= sample_real_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state43)) then
                i_4_reg_483 <= i_4_fu_363_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_5_reg_378 <= i_5_fu_317_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                j_1_reg_411 <= j_1_fu_340_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state6))) then
                reg_278 <= grp_fu_261_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state24))) then
                reg_284 <= grp_fu_270_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state23))) then
                reg_291 <= grp_fu_245_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state36))) then
                reg_297 <= grp_fu_235_p2;
                reg_304 <= grp_fu_239_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                temp_imag_addr_reg_398 <= tmp_s_fu_328_p1(8 - 1 downto 0);
                temp_real_addr_reg_393 <= tmp_s_fu_328_p1(8 - 1 downto 0);
                w_reg_403 <= grp_fu_264_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                tmp_13_reg_388 <= grp_fu_273_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state43) and (tmp_14_fu_357_p2 = ap_const_lv1_0))) then
                    tmp_18_reg_488(8 downto 0) <= tmp_18_fu_369_p1(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then
                tmp_23_reg_465 <= grp_fu_249_p2;
                tmp_26_reg_470 <= grp_fu_253_p2;
                tmp_27_reg_475 <= grp_fu_257_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state26) and (ap_const_boolean_0 = ap_block_state26_on_subcall_done))) then
                tmp_i_i9_reg_426 <= grp_sin_or_cos_double_s_fu_216_ap_return;
                tmp_i_i_reg_421 <= grp_sin_or_cos_double_s_fu_197_ap_return;
            end if;
        end if;
    end process;
    tmp_18_reg_488(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_fu_311_p2, ap_CS_fsm_state15, tmp_17_fu_334_p2, ap_CS_fsm_state26, ap_block_state26_on_subcall_done, ap_CS_fsm_state43, tmp_14_fu_357_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_311_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state43;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state15) and (tmp_17_fu_334_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state26) and (ap_const_boolean_0 = ap_block_state26_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state43 => 
                if (((tmp_14_fu_357_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state43))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state44;
                end if;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_block_state26_on_subcall_done_assign_proc : process(grp_sin_or_cos_double_s_fu_197_ap_done, grp_sin_or_cos_double_s_fu_216_ap_done)
    begin
                ap_block_state26_on_subcall_done <= ((grp_sin_or_cos_double_s_fu_216_ap_done = ap_const_logic_0) or (grp_sin_or_cos_double_s_fu_197_ap_done = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state43, tmp_14_fu_357_p2)
    begin
        if (((tmp_14_fu_357_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state43))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state43, tmp_14_fu_357_p2)
    begin
        if (((tmp_14_fu_357_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state43))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_235_opcode_assign_proc : process(ap_CS_fsm_state32, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_fu_235_opcode <= ap_const_lv2_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_fu_235_opcode <= ap_const_lv2_0;
        else 
            grp_fu_235_opcode <= "XX";
        end if; 
    end process;


    grp_fu_235_p0_assign_proc : process(reg_291, tmp_16_reg_162, ap_CS_fsm_state32, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_fu_235_p0 <= tmp_16_reg_162;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_fu_235_p0 <= reg_291;
        else 
            grp_fu_235_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_235_p1_assign_proc : process(reg_297, tmp_23_reg_465, ap_CS_fsm_state32, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_fu_235_p1 <= reg_297;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_fu_235_p1 <= tmp_23_reg_465;
        else 
            grp_fu_235_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_239_opcode_assign_proc : process(ap_CS_fsm_state32, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_fu_239_opcode <= ap_const_lv2_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_fu_239_opcode <= ap_const_lv2_0;
        else 
            grp_fu_239_opcode <= "XX";
        end if; 
    end process;


    grp_fu_239_p0_assign_proc : process(tmp_26_reg_470, tmp_15_reg_150, ap_CS_fsm_state32, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_fu_239_p0 <= tmp_15_reg_150;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_fu_239_p0 <= tmp_26_reg_470;
        else 
            grp_fu_239_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_239_p1_assign_proc : process(reg_304, tmp_27_reg_475, ap_CS_fsm_state32, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_fu_239_p1 <= reg_304;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_fu_239_p1 <= tmp_27_reg_475;
        else 
            grp_fu_239_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_245_p0_assign_proc : process(reg_278, sample_real_load_reg_453, ap_CS_fsm_state20, ap_CS_fsm_state28)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_fu_245_p0 <= sample_real_load_reg_453;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_245_p0 <= reg_278;
        else 
            grp_fu_245_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_245_p1_assign_proc : process(w_reg_403, c_reg_441, ap_CS_fsm_state20, ap_CS_fsm_state28)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_fu_245_p1 <= c_reg_441;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_245_p1 <= w_reg_403;
        else 
            grp_fu_245_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_261_p0_assign_proc : process(ap_CS_fsm_state2, tmp_30_fu_323_p1, ap_CS_fsm_state15, tmp_31_fu_346_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_261_p0 <= tmp_31_fu_346_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_261_p0 <= tmp_30_fu_323_p1;
        else 
            grp_fu_261_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_264_p0_assign_proc : process(tmp_13_reg_388, ap_CS_fsm_state14, tmp_i_i_reg_421, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_fu_264_p0 <= tmp_i_i_reg_421;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_264_p0 <= tmp_13_reg_388;
        else 
            grp_fu_264_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_270_p0_assign_proc : process(reg_278, ap_CS_fsm_state7, ap_CS_fsm_state24, reg_291)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_fu_270_p0 <= reg_291;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_270_p0 <= reg_278;
        else 
            grp_fu_270_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_sin_or_cos_double_s_fu_197_ap_start <= grp_sin_or_cos_double_s_fu_197_ap_start_reg;
    grp_sin_or_cos_double_s_fu_197_do_cos <= ap_const_logic_1;
    grp_sin_or_cos_double_s_fu_216_ap_start <= grp_sin_or_cos_double_s_fu_216_ap_start_reg;
    grp_sin_or_cos_double_s_fu_216_do_cos <= ap_const_logic_0;
    i_4_fu_363_p2 <= std_logic_vector(unsigned(i_1_reg_186) + unsigned(ap_const_lv9_1));
    i_5_fu_317_p2 <= std_logic_vector(unsigned(i_reg_138) + unsigned(ap_const_lv9_1));
    j_1_fu_340_p2 <= std_logic_vector(unsigned(j_reg_174) + unsigned(ap_const_lv9_1));

    sample_imag_address0_assign_proc : process(ap_CS_fsm_state26, tmp_18_reg_488, ap_CS_fsm_state44, tmp_21_fu_351_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            sample_imag_address0 <= tmp_18_reg_488(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            sample_imag_address0 <= tmp_21_fu_351_p1(8 - 1 downto 0);
        else 
            sample_imag_address0 <= "XXXXXXXX";
        end if; 
    end process;


    sample_imag_ce0_assign_proc : process(ap_CS_fsm_state26, ap_block_state26_on_subcall_done, ap_CS_fsm_state44)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state44) or ((ap_const_logic_1 = ap_CS_fsm_state26) and (ap_const_boolean_0 = ap_block_state26_on_subcall_done)))) then 
            sample_imag_ce0 <= ap_const_logic_1;
        else 
            sample_imag_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_imag_d0 <= temp_imag_q0;

    sample_imag_we0_assign_proc : process(ap_CS_fsm_state44)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            sample_imag_we0 <= ap_const_logic_1;
        else 
            sample_imag_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_real_address0_assign_proc : process(ap_CS_fsm_state26, tmp_18_reg_488, ap_CS_fsm_state44, tmp_21_fu_351_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            sample_real_address0 <= tmp_18_reg_488(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            sample_real_address0 <= tmp_21_fu_351_p1(8 - 1 downto 0);
        else 
            sample_real_address0 <= "XXXXXXXX";
        end if; 
    end process;


    sample_real_ce0_assign_proc : process(ap_CS_fsm_state26, ap_block_state26_on_subcall_done, ap_CS_fsm_state44)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state44) or ((ap_const_logic_1 = ap_CS_fsm_state26) and (ap_const_boolean_0 = ap_block_state26_on_subcall_done)))) then 
            sample_real_ce0 <= ap_const_logic_1;
        else 
            sample_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_real_d0 <= temp_real_q0;

    sample_real_we0_assign_proc : process(ap_CS_fsm_state44)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            sample_real_we0 <= ap_const_logic_1;
        else 
            sample_real_we0 <= ap_const_logic_0;
        end if; 
    end process;


    temp_imag_address0_assign_proc : process(ap_CS_fsm_state14, temp_imag_addr_reg_398, ap_CS_fsm_state43, tmp_18_fu_369_p1, ap_CS_fsm_state42, tmp_s_fu_328_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            temp_imag_address0 <= tmp_18_fu_369_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            temp_imag_address0 <= temp_imag_addr_reg_398;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            temp_imag_address0 <= tmp_s_fu_328_p1(8 - 1 downto 0);
        else 
            temp_imag_address0 <= "XXXXXXXX";
        end if; 
    end process;


    temp_imag_ce0_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state43, ap_CS_fsm_state42)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            temp_imag_ce0 <= ap_const_logic_1;
        else 
            temp_imag_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    temp_imag_d0_assign_proc : process(reg_304, ap_CS_fsm_state14, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            temp_imag_d0 <= reg_304;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            temp_imag_d0 <= ap_const_lv32_0;
        else 
            temp_imag_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    temp_imag_we0_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state42)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            temp_imag_we0 <= ap_const_logic_1;
        else 
            temp_imag_we0 <= ap_const_logic_0;
        end if; 
    end process;


    temp_real_address0_assign_proc : process(temp_real_addr_reg_393, ap_CS_fsm_state14, ap_CS_fsm_state43, tmp_18_fu_369_p1, ap_CS_fsm_state42, tmp_s_fu_328_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            temp_real_address0 <= tmp_18_fu_369_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            temp_real_address0 <= temp_real_addr_reg_393;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            temp_real_address0 <= tmp_s_fu_328_p1(8 - 1 downto 0);
        else 
            temp_real_address0 <= "XXXXXXXX";
        end if; 
    end process;


    temp_real_ce0_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state43, ap_CS_fsm_state42)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            temp_real_ce0 <= ap_const_logic_1;
        else 
            temp_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    temp_real_d0_assign_proc : process(reg_297, ap_CS_fsm_state14, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            temp_real_d0 <= reg_297;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            temp_real_d0 <= ap_const_lv32_0;
        else 
            temp_real_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    temp_real_we0_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state42)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            temp_real_we0 <= ap_const_logic_1;
        else 
            temp_real_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_14_fu_357_p2 <= "1" when (i_1_reg_186 = ap_const_lv9_100) else "0";
    tmp_17_fu_334_p2 <= "1" when (j_reg_174 = ap_const_lv9_100) else "0";
    tmp_18_fu_369_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_186),64));
    tmp_21_fu_351_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_174),64));
    tmp_30_fu_323_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_138),32));
    tmp_31_fu_346_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_174),32));
    tmp_fu_311_p2 <= "1" when (i_reg_138 = ap_const_lv9_100) else "0";
    tmp_s_fu_328_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_138),64));
end behav;
