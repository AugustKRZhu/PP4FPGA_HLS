// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "matrix_vector.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic matrix_vector::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic matrix_vector::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> matrix_vector::ap_ST_fsm_state1 = "1";
const sc_lv<3> matrix_vector::ap_ST_fsm_pp0_stage0 = "10";
const sc_lv<3> matrix_vector::ap_ST_fsm_state9 = "100";
const sc_lv<32> matrix_vector::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool matrix_vector::ap_const_boolean_1 = true;
const sc_lv<32> matrix_vector::ap_const_lv32_1 = "1";
const bool matrix_vector::ap_const_boolean_0 = false;
const sc_lv<1> matrix_vector::ap_const_lv1_0 = "0";
const sc_lv<1> matrix_vector::ap_const_lv1_1 = "1";
const sc_lv<4> matrix_vector::ap_const_lv4_0 = "0000";
const sc_lv<4> matrix_vector::ap_const_lv4_8 = "1000";
const sc_lv<4> matrix_vector::ap_const_lv4_1 = "1";
const sc_lv<32> matrix_vector::ap_const_lv32_2 = "10";

matrix_vector::matrix_vector(sc_module_name name) : sc_module(name), mVcdFile(0) {
    matrix_vector_mulbkb_U1 = new matrix_vector_mulbkb<1,3,32,32,32>("matrix_vector_mulbkb_U1");
    matrix_vector_mulbkb_U1->clk(ap_clk);
    matrix_vector_mulbkb_U1->reset(ap_rst);
    matrix_vector_mulbkb_U1->din0(V_In_0_read_reg_348_pp0_iter1_reg);
    matrix_vector_mulbkb_U1->din1(M_0_load_reg_428);
    matrix_vector_mulbkb_U1->ce(ap_var_for_const0);
    matrix_vector_mulbkb_U1->dout(grp_fu_270_p2);
    matrix_vector_mulbkb_U2 = new matrix_vector_mulbkb<1,3,32,32,32>("matrix_vector_mulbkb_U2");
    matrix_vector_mulbkb_U2->clk(ap_clk);
    matrix_vector_mulbkb_U2->reset(ap_rst);
    matrix_vector_mulbkb_U2->din0(V_In_1_read_reg_358_pp0_iter1_reg);
    matrix_vector_mulbkb_U2->din1(M_1_load_reg_433);
    matrix_vector_mulbkb_U2->ce(ap_var_for_const0);
    matrix_vector_mulbkb_U2->dout(grp_fu_274_p2);
    matrix_vector_mulbkb_U3 = new matrix_vector_mulbkb<1,3,32,32,32>("matrix_vector_mulbkb_U3");
    matrix_vector_mulbkb_U3->clk(ap_clk);
    matrix_vector_mulbkb_U3->reset(ap_rst);
    matrix_vector_mulbkb_U3->din0(V_In_2_read_reg_368_pp0_iter1_reg);
    matrix_vector_mulbkb_U3->din1(M_2_load_reg_438);
    matrix_vector_mulbkb_U3->ce(ap_var_for_const0);
    matrix_vector_mulbkb_U3->dout(grp_fu_278_p2);
    matrix_vector_mulbkb_U4 = new matrix_vector_mulbkb<1,3,32,32,32>("matrix_vector_mulbkb_U4");
    matrix_vector_mulbkb_U4->clk(ap_clk);
    matrix_vector_mulbkb_U4->reset(ap_rst);
    matrix_vector_mulbkb_U4->din0(V_In_3_read_reg_378_pp0_iter1_reg);
    matrix_vector_mulbkb_U4->din1(M_3_load_reg_443);
    matrix_vector_mulbkb_U4->ce(ap_var_for_const0);
    matrix_vector_mulbkb_U4->dout(grp_fu_282_p2);
    matrix_vector_mulbkb_U5 = new matrix_vector_mulbkb<1,3,32,32,32>("matrix_vector_mulbkb_U5");
    matrix_vector_mulbkb_U5->clk(ap_clk);
    matrix_vector_mulbkb_U5->reset(ap_rst);
    matrix_vector_mulbkb_U5->din0(V_In_4_read_reg_388_pp0_iter1_reg);
    matrix_vector_mulbkb_U5->din1(M_4_load_reg_448);
    matrix_vector_mulbkb_U5->ce(ap_var_for_const0);
    matrix_vector_mulbkb_U5->dout(grp_fu_286_p2);
    matrix_vector_mulbkb_U6 = new matrix_vector_mulbkb<1,3,32,32,32>("matrix_vector_mulbkb_U6");
    matrix_vector_mulbkb_U6->clk(ap_clk);
    matrix_vector_mulbkb_U6->reset(ap_rst);
    matrix_vector_mulbkb_U6->din0(V_In_5_read_reg_398_pp0_iter1_reg);
    matrix_vector_mulbkb_U6->din1(M_5_load_reg_453);
    matrix_vector_mulbkb_U6->ce(ap_var_for_const0);
    matrix_vector_mulbkb_U6->dout(grp_fu_290_p2);
    matrix_vector_mulbkb_U7 = new matrix_vector_mulbkb<1,3,32,32,32>("matrix_vector_mulbkb_U7");
    matrix_vector_mulbkb_U7->clk(ap_clk);
    matrix_vector_mulbkb_U7->reset(ap_rst);
    matrix_vector_mulbkb_U7->din0(V_In_6_read_reg_408_pp0_iter1_reg);
    matrix_vector_mulbkb_U7->din1(M_6_load_reg_458);
    matrix_vector_mulbkb_U7->ce(ap_var_for_const0);
    matrix_vector_mulbkb_U7->dout(grp_fu_294_p2);
    matrix_vector_mulbkb_U8 = new matrix_vector_mulbkb<1,3,32,32,32>("matrix_vector_mulbkb_U8");
    matrix_vector_mulbkb_U8->clk(ap_clk);
    matrix_vector_mulbkb_U8->reset(ap_rst);
    matrix_vector_mulbkb_U8->din0(V_In_7_read_reg_418_pp0_iter1_reg);
    matrix_vector_mulbkb_U8->din1(M_7_load_reg_463);
    matrix_vector_mulbkb_U8->ce(ap_var_for_const0);
    matrix_vector_mulbkb_U8->dout(grp_fu_298_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_M_0_address0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( tmp_fu_258_p1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_M_0_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_M_1_address0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( tmp_fu_258_p1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_M_1_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_M_2_address0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( tmp_fu_258_p1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_M_2_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_M_3_address0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( tmp_fu_258_p1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_M_3_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_M_4_address0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( tmp_fu_258_p1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_M_4_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_M_5_address0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( tmp_fu_258_p1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_M_5_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_M_6_address0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( tmp_fu_258_p1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_M_6_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_M_7_address0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( tmp_fu_258_p1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_M_7_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_V_Out_address0);
    sensitive << ( tmp_reg_343_pp0_iter5_reg );
    sensitive << ( ap_enable_reg_pp0_iter6 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_V_Out_ce0);
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter6 );

    SC_METHOD(thread_V_Out_d0);
    sensitive << ( tmp4_reg_518 );
    sensitive << ( ap_enable_reg_pp0_iter6 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( tmp1_fu_324_p2 );

    SC_METHOD(thread_V_Out_we0);
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( exitcond1_reg_334_pp0_iter5_reg );
    sensitive << ( ap_enable_reg_pp0_iter6 );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_11001);

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter1);

    SC_METHOD(thread_ap_block_state4_pp0_stage0_iter2);

    SC_METHOD(thread_ap_block_state5_pp0_stage0_iter3);

    SC_METHOD(thread_ap_block_state6_pp0_stage0_iter4);

    SC_METHOD(thread_ap_block_state7_pp0_stage0_iter5);

    SC_METHOD(thread_ap_block_state8_pp0_stage0_iter6);

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state2);
    sensitive << ( exitcond1_fu_246_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_enable_reg_pp0_iter4 );
    sensitive << ( ap_enable_reg_pp0_iter5 );
    sensitive << ( ap_enable_reg_pp0_iter6 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_exitcond1_fu_246_p2);
    sensitive << ( i_reg_235 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_i_1_fu_252_p2);
    sensitive << ( i_reg_235 );

    SC_METHOD(thread_tmp1_fu_324_p2);
    sensitive << ( tmp2_reg_508 );
    sensitive << ( tmp3_reg_513 );

    SC_METHOD(thread_tmp2_fu_302_p2);
    sensitive << ( tmp_3_reg_468 );
    sensitive << ( tmp_3_1_reg_473 );

    SC_METHOD(thread_tmp3_fu_306_p2);
    sensitive << ( tmp_3_2_reg_478 );
    sensitive << ( tmp_3_3_reg_483 );

    SC_METHOD(thread_tmp4_fu_318_p2);
    sensitive << ( tmp6_fu_314_p2 );
    sensitive << ( tmp5_fu_310_p2 );

    SC_METHOD(thread_tmp5_fu_310_p2);
    sensitive << ( tmp_3_4_reg_488 );
    sensitive << ( tmp_3_5_reg_493 );

    SC_METHOD(thread_tmp6_fu_314_p2);
    sensitive << ( tmp_3_6_reg_498 );
    sensitive << ( tmp_3_7_reg_503 );

    SC_METHOD(thread_tmp_fu_258_p1);
    sensitive << ( i_reg_235 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( exitcond1_fu_246_p2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter5 );
    sensitive << ( ap_enable_reg_pp0_iter6 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "001";
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter2 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter3 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter4 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter5 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter6 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "matrix_vector_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, M_0_address0, "(port)M_0_address0");
    sc_trace(mVcdFile, M_0_ce0, "(port)M_0_ce0");
    sc_trace(mVcdFile, M_0_q0, "(port)M_0_q0");
    sc_trace(mVcdFile, M_1_address0, "(port)M_1_address0");
    sc_trace(mVcdFile, M_1_ce0, "(port)M_1_ce0");
    sc_trace(mVcdFile, M_1_q0, "(port)M_1_q0");
    sc_trace(mVcdFile, M_2_address0, "(port)M_2_address0");
    sc_trace(mVcdFile, M_2_ce0, "(port)M_2_ce0");
    sc_trace(mVcdFile, M_2_q0, "(port)M_2_q0");
    sc_trace(mVcdFile, M_3_address0, "(port)M_3_address0");
    sc_trace(mVcdFile, M_3_ce0, "(port)M_3_ce0");
    sc_trace(mVcdFile, M_3_q0, "(port)M_3_q0");
    sc_trace(mVcdFile, M_4_address0, "(port)M_4_address0");
    sc_trace(mVcdFile, M_4_ce0, "(port)M_4_ce0");
    sc_trace(mVcdFile, M_4_q0, "(port)M_4_q0");
    sc_trace(mVcdFile, M_5_address0, "(port)M_5_address0");
    sc_trace(mVcdFile, M_5_ce0, "(port)M_5_ce0");
    sc_trace(mVcdFile, M_5_q0, "(port)M_5_q0");
    sc_trace(mVcdFile, M_6_address0, "(port)M_6_address0");
    sc_trace(mVcdFile, M_6_ce0, "(port)M_6_ce0");
    sc_trace(mVcdFile, M_6_q0, "(port)M_6_q0");
    sc_trace(mVcdFile, M_7_address0, "(port)M_7_address0");
    sc_trace(mVcdFile, M_7_ce0, "(port)M_7_ce0");
    sc_trace(mVcdFile, M_7_q0, "(port)M_7_q0");
    sc_trace(mVcdFile, V_In_0, "(port)V_In_0");
    sc_trace(mVcdFile, V_In_1, "(port)V_In_1");
    sc_trace(mVcdFile, V_In_2, "(port)V_In_2");
    sc_trace(mVcdFile, V_In_3, "(port)V_In_3");
    sc_trace(mVcdFile, V_In_4, "(port)V_In_4");
    sc_trace(mVcdFile, V_In_5, "(port)V_In_5");
    sc_trace(mVcdFile, V_In_6, "(port)V_In_6");
    sc_trace(mVcdFile, V_In_7, "(port)V_In_7");
    sc_trace(mVcdFile, V_Out_address0, "(port)V_Out_address0");
    sc_trace(mVcdFile, V_Out_ce0, "(port)V_Out_ce0");
    sc_trace(mVcdFile, V_Out_we0, "(port)V_Out_we0");
    sc_trace(mVcdFile, V_Out_d0, "(port)V_Out_d0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, i_reg_235, "i_reg_235");
    sc_trace(mVcdFile, exitcond1_fu_246_p2, "exitcond1_fu_246_p2");
    sc_trace(mVcdFile, exitcond1_reg_334, "exitcond1_reg_334");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter0, "ap_block_state2_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter1, "ap_block_state3_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state4_pp0_stage0_iter2, "ap_block_state4_pp0_stage0_iter2");
    sc_trace(mVcdFile, ap_block_state5_pp0_stage0_iter3, "ap_block_state5_pp0_stage0_iter3");
    sc_trace(mVcdFile, ap_block_state6_pp0_stage0_iter4, "ap_block_state6_pp0_stage0_iter4");
    sc_trace(mVcdFile, ap_block_state7_pp0_stage0_iter5, "ap_block_state7_pp0_stage0_iter5");
    sc_trace(mVcdFile, ap_block_state8_pp0_stage0_iter6, "ap_block_state8_pp0_stage0_iter6");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, exitcond1_reg_334_pp0_iter1_reg, "exitcond1_reg_334_pp0_iter1_reg");
    sc_trace(mVcdFile, exitcond1_reg_334_pp0_iter2_reg, "exitcond1_reg_334_pp0_iter2_reg");
    sc_trace(mVcdFile, exitcond1_reg_334_pp0_iter3_reg, "exitcond1_reg_334_pp0_iter3_reg");
    sc_trace(mVcdFile, exitcond1_reg_334_pp0_iter4_reg, "exitcond1_reg_334_pp0_iter4_reg");
    sc_trace(mVcdFile, exitcond1_reg_334_pp0_iter5_reg, "exitcond1_reg_334_pp0_iter5_reg");
    sc_trace(mVcdFile, i_1_fu_252_p2, "i_1_fu_252_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, tmp_fu_258_p1, "tmp_fu_258_p1");
    sc_trace(mVcdFile, tmp_reg_343, "tmp_reg_343");
    sc_trace(mVcdFile, tmp_reg_343_pp0_iter1_reg, "tmp_reg_343_pp0_iter1_reg");
    sc_trace(mVcdFile, tmp_reg_343_pp0_iter2_reg, "tmp_reg_343_pp0_iter2_reg");
    sc_trace(mVcdFile, tmp_reg_343_pp0_iter3_reg, "tmp_reg_343_pp0_iter3_reg");
    sc_trace(mVcdFile, tmp_reg_343_pp0_iter4_reg, "tmp_reg_343_pp0_iter4_reg");
    sc_trace(mVcdFile, tmp_reg_343_pp0_iter5_reg, "tmp_reg_343_pp0_iter5_reg");
    sc_trace(mVcdFile, V_In_0_read_reg_348, "V_In_0_read_reg_348");
    sc_trace(mVcdFile, V_In_0_read_reg_348_pp0_iter1_reg, "V_In_0_read_reg_348_pp0_iter1_reg");
    sc_trace(mVcdFile, V_In_1_read_reg_358, "V_In_1_read_reg_358");
    sc_trace(mVcdFile, V_In_1_read_reg_358_pp0_iter1_reg, "V_In_1_read_reg_358_pp0_iter1_reg");
    sc_trace(mVcdFile, V_In_2_read_reg_368, "V_In_2_read_reg_368");
    sc_trace(mVcdFile, V_In_2_read_reg_368_pp0_iter1_reg, "V_In_2_read_reg_368_pp0_iter1_reg");
    sc_trace(mVcdFile, V_In_3_read_reg_378, "V_In_3_read_reg_378");
    sc_trace(mVcdFile, V_In_3_read_reg_378_pp0_iter1_reg, "V_In_3_read_reg_378_pp0_iter1_reg");
    sc_trace(mVcdFile, V_In_4_read_reg_388, "V_In_4_read_reg_388");
    sc_trace(mVcdFile, V_In_4_read_reg_388_pp0_iter1_reg, "V_In_4_read_reg_388_pp0_iter1_reg");
    sc_trace(mVcdFile, V_In_5_read_reg_398, "V_In_5_read_reg_398");
    sc_trace(mVcdFile, V_In_5_read_reg_398_pp0_iter1_reg, "V_In_5_read_reg_398_pp0_iter1_reg");
    sc_trace(mVcdFile, V_In_6_read_reg_408, "V_In_6_read_reg_408");
    sc_trace(mVcdFile, V_In_6_read_reg_408_pp0_iter1_reg, "V_In_6_read_reg_408_pp0_iter1_reg");
    sc_trace(mVcdFile, V_In_7_read_reg_418, "V_In_7_read_reg_418");
    sc_trace(mVcdFile, V_In_7_read_reg_418_pp0_iter1_reg, "V_In_7_read_reg_418_pp0_iter1_reg");
    sc_trace(mVcdFile, M_0_load_reg_428, "M_0_load_reg_428");
    sc_trace(mVcdFile, M_1_load_reg_433, "M_1_load_reg_433");
    sc_trace(mVcdFile, M_2_load_reg_438, "M_2_load_reg_438");
    sc_trace(mVcdFile, M_3_load_reg_443, "M_3_load_reg_443");
    sc_trace(mVcdFile, M_4_load_reg_448, "M_4_load_reg_448");
    sc_trace(mVcdFile, M_5_load_reg_453, "M_5_load_reg_453");
    sc_trace(mVcdFile, M_6_load_reg_458, "M_6_load_reg_458");
    sc_trace(mVcdFile, M_7_load_reg_463, "M_7_load_reg_463");
    sc_trace(mVcdFile, grp_fu_270_p2, "grp_fu_270_p2");
    sc_trace(mVcdFile, tmp_3_reg_468, "tmp_3_reg_468");
    sc_trace(mVcdFile, grp_fu_274_p2, "grp_fu_274_p2");
    sc_trace(mVcdFile, tmp_3_1_reg_473, "tmp_3_1_reg_473");
    sc_trace(mVcdFile, grp_fu_278_p2, "grp_fu_278_p2");
    sc_trace(mVcdFile, tmp_3_2_reg_478, "tmp_3_2_reg_478");
    sc_trace(mVcdFile, grp_fu_282_p2, "grp_fu_282_p2");
    sc_trace(mVcdFile, tmp_3_3_reg_483, "tmp_3_3_reg_483");
    sc_trace(mVcdFile, grp_fu_286_p2, "grp_fu_286_p2");
    sc_trace(mVcdFile, tmp_3_4_reg_488, "tmp_3_4_reg_488");
    sc_trace(mVcdFile, grp_fu_290_p2, "grp_fu_290_p2");
    sc_trace(mVcdFile, tmp_3_5_reg_493, "tmp_3_5_reg_493");
    sc_trace(mVcdFile, grp_fu_294_p2, "grp_fu_294_p2");
    sc_trace(mVcdFile, tmp_3_6_reg_498, "tmp_3_6_reg_498");
    sc_trace(mVcdFile, grp_fu_298_p2, "grp_fu_298_p2");
    sc_trace(mVcdFile, tmp_3_7_reg_503, "tmp_3_7_reg_503");
    sc_trace(mVcdFile, tmp2_fu_302_p2, "tmp2_fu_302_p2");
    sc_trace(mVcdFile, tmp2_reg_508, "tmp2_reg_508");
    sc_trace(mVcdFile, tmp3_fu_306_p2, "tmp3_fu_306_p2");
    sc_trace(mVcdFile, tmp3_reg_513, "tmp3_reg_513");
    sc_trace(mVcdFile, tmp4_fu_318_p2, "tmp4_fu_318_p2");
    sc_trace(mVcdFile, tmp4_reg_518, "tmp4_reg_518");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state2, "ap_condition_pp0_exit_iter0_state2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter3, "ap_enable_reg_pp0_iter3");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter4, "ap_enable_reg_pp0_iter4");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter5, "ap_enable_reg_pp0_iter5");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter6, "ap_enable_reg_pp0_iter6");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, tmp6_fu_314_p2, "tmp6_fu_314_p2");
    sc_trace(mVcdFile, tmp5_fu_310_p2, "tmp5_fu_310_p2");
    sc_trace(mVcdFile, tmp1_fu_324_p2, "tmp1_fu_324_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
#endif

    }
    mHdltvinHandle.open("matrix_vector.hdltvin.dat");
    mHdltvoutHandle.open("matrix_vector.hdltvout.dat");
}

matrix_vector::~matrix_vector() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete matrix_vector_mulbkb_U1;
    delete matrix_vector_mulbkb_U2;
    delete matrix_vector_mulbkb_U3;
    delete matrix_vector_mulbkb_U4;
    delete matrix_vector_mulbkb_U5;
    delete matrix_vector_mulbkb_U6;
    delete matrix_vector_mulbkb_U7;
    delete matrix_vector_mulbkb_U8;
}

void matrix_vector::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void matrix_vector::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
                    esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read())) {
            if (esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read())) {
                ap_enable_reg_pp0_iter1 = (ap_condition_pp0_exit_iter0_state2.read() ^ ap_const_logic_1);
            } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
                ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
            }
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read())) {
            ap_enable_reg_pp0_iter2 = ap_enable_reg_pp0_iter1.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter3 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read())) {
            ap_enable_reg_pp0_iter3 = ap_enable_reg_pp0_iter2.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter4 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read())) {
            ap_enable_reg_pp0_iter4 = ap_enable_reg_pp0_iter3.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter5 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read())) {
            ap_enable_reg_pp0_iter5 = ap_enable_reg_pp0_iter4.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter6 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read())) {
            ap_enable_reg_pp0_iter6 = ap_enable_reg_pp0_iter5.read();
        } else if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
                    esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
            ap_enable_reg_pp0_iter6 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(exitcond1_fu_246_p2.read(), ap_const_lv1_0))) {
        i_reg_235 = i_1_fu_252_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        i_reg_235 = ap_const_lv4_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(exitcond1_reg_334.read(), ap_const_lv1_0))) {
        M_0_load_reg_428 = M_0_q0.read();
        M_1_load_reg_433 = M_1_q0.read();
        M_2_load_reg_438 = M_2_q0.read();
        M_3_load_reg_443 = M_3_q0.read();
        M_4_load_reg_448 = M_4_q0.read();
        M_5_load_reg_453 = M_5_q0.read();
        M_6_load_reg_458 = M_6_q0.read();
        M_7_load_reg_463 = M_7_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(exitcond1_fu_246_p2.read(), ap_const_lv1_0))) {
        V_In_0_read_reg_348 = V_In_0.read();
        V_In_1_read_reg_358 = V_In_1.read();
        V_In_2_read_reg_368 = V_In_2.read();
        V_In_3_read_reg_378 = V_In_3.read();
        V_In_4_read_reg_388 = V_In_4.read();
        V_In_5_read_reg_398 = V_In_5.read();
        V_In_6_read_reg_408 = V_In_6.read();
        V_In_7_read_reg_418 = V_In_7.read();
        tmp_reg_343 = tmp_fu_258_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        V_In_0_read_reg_348_pp0_iter1_reg = V_In_0_read_reg_348.read();
        V_In_1_read_reg_358_pp0_iter1_reg = V_In_1_read_reg_358.read();
        V_In_2_read_reg_368_pp0_iter1_reg = V_In_2_read_reg_368.read();
        V_In_3_read_reg_378_pp0_iter1_reg = V_In_3_read_reg_378.read();
        V_In_4_read_reg_388_pp0_iter1_reg = V_In_4_read_reg_388.read();
        V_In_5_read_reg_398_pp0_iter1_reg = V_In_5_read_reg_398.read();
        V_In_6_read_reg_408_pp0_iter1_reg = V_In_6_read_reg_408.read();
        V_In_7_read_reg_418_pp0_iter1_reg = V_In_7_read_reg_418.read();
        exitcond1_reg_334 = exitcond1_fu_246_p2.read();
        exitcond1_reg_334_pp0_iter1_reg = exitcond1_reg_334.read();
        tmp_reg_343_pp0_iter1_reg = tmp_reg_343.read();
    }
    if (esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) {
        exitcond1_reg_334_pp0_iter2_reg = exitcond1_reg_334_pp0_iter1_reg.read();
        exitcond1_reg_334_pp0_iter3_reg = exitcond1_reg_334_pp0_iter2_reg.read();
        exitcond1_reg_334_pp0_iter4_reg = exitcond1_reg_334_pp0_iter3_reg.read();
        exitcond1_reg_334_pp0_iter5_reg = exitcond1_reg_334_pp0_iter4_reg.read();
        tmp_reg_343_pp0_iter2_reg = tmp_reg_343_pp0_iter1_reg.read();
        tmp_reg_343_pp0_iter3_reg = tmp_reg_343_pp0_iter2_reg.read();
        tmp_reg_343_pp0_iter4_reg = tmp_reg_343_pp0_iter3_reg.read();
        tmp_reg_343_pp0_iter5_reg = tmp_reg_343_pp0_iter4_reg.read();
    }
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(exitcond1_reg_334_pp0_iter4_reg.read(), ap_const_lv1_0))) {
        tmp2_reg_508 = tmp2_fu_302_p2.read();
        tmp3_reg_513 = tmp3_fu_306_p2.read();
        tmp4_reg_518 = tmp4_fu_318_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(exitcond1_reg_334_pp0_iter3_reg.read(), ap_const_lv1_0))) {
        tmp_3_1_reg_473 = grp_fu_274_p2.read();
        tmp_3_2_reg_478 = grp_fu_278_p2.read();
        tmp_3_3_reg_483 = grp_fu_282_p2.read();
        tmp_3_4_reg_488 = grp_fu_286_p2.read();
        tmp_3_5_reg_493 = grp_fu_290_p2.read();
        tmp_3_6_reg_498 = grp_fu_294_p2.read();
        tmp_3_7_reg_503 = grp_fu_298_p2.read();
        tmp_3_reg_468 = grp_fu_270_p2.read();
    }
}

void matrix_vector::thread_M_0_address0() {
    M_0_address0 =  (sc_lv<3>) (tmp_fu_258_p1.read());
}

void matrix_vector::thread_M_0_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1))) {
        M_0_ce0 = ap_const_logic_1;
    } else {
        M_0_ce0 = ap_const_logic_0;
    }
}

void matrix_vector::thread_M_1_address0() {
    M_1_address0 =  (sc_lv<3>) (tmp_fu_258_p1.read());
}

void matrix_vector::thread_M_1_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1))) {
        M_1_ce0 = ap_const_logic_1;
    } else {
        M_1_ce0 = ap_const_logic_0;
    }
}

void matrix_vector::thread_M_2_address0() {
    M_2_address0 =  (sc_lv<3>) (tmp_fu_258_p1.read());
}

void matrix_vector::thread_M_2_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1))) {
        M_2_ce0 = ap_const_logic_1;
    } else {
        M_2_ce0 = ap_const_logic_0;
    }
}

void matrix_vector::thread_M_3_address0() {
    M_3_address0 =  (sc_lv<3>) (tmp_fu_258_p1.read());
}

void matrix_vector::thread_M_3_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1))) {
        M_3_ce0 = ap_const_logic_1;
    } else {
        M_3_ce0 = ap_const_logic_0;
    }
}

void matrix_vector::thread_M_4_address0() {
    M_4_address0 =  (sc_lv<3>) (tmp_fu_258_p1.read());
}

void matrix_vector::thread_M_4_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1))) {
        M_4_ce0 = ap_const_logic_1;
    } else {
        M_4_ce0 = ap_const_logic_0;
    }
}

void matrix_vector::thread_M_5_address0() {
    M_5_address0 =  (sc_lv<3>) (tmp_fu_258_p1.read());
}

void matrix_vector::thread_M_5_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1))) {
        M_5_ce0 = ap_const_logic_1;
    } else {
        M_5_ce0 = ap_const_logic_0;
    }
}

void matrix_vector::thread_M_6_address0() {
    M_6_address0 =  (sc_lv<3>) (tmp_fu_258_p1.read());
}

void matrix_vector::thread_M_6_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1))) {
        M_6_ce0 = ap_const_logic_1;
    } else {
        M_6_ce0 = ap_const_logic_0;
    }
}

void matrix_vector::thread_M_7_address0() {
    M_7_address0 =  (sc_lv<3>) (tmp_fu_258_p1.read());
}

void matrix_vector::thread_M_7_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1))) {
        M_7_ce0 = ap_const_logic_1;
    } else {
        M_7_ce0 = ap_const_logic_0;
    }
}

void matrix_vector::thread_V_Out_address0() {
    V_Out_address0 =  (sc_lv<3>) (tmp_reg_343_pp0_iter5_reg.read());
}

void matrix_vector::thread_V_Out_ce0() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_enable_reg_pp0_iter6.read(), ap_const_logic_1))) {
        V_Out_ce0 = ap_const_logic_1;
    } else {
        V_Out_ce0 = ap_const_logic_0;
    }
}

void matrix_vector::thread_V_Out_d0() {
    V_Out_d0 = (!tmp4_reg_518.read().is_01() || !tmp1_fu_324_p2.read().is_01())? sc_lv<32>(): (sc_biguint<32>(tmp4_reg_518.read()) + sc_biguint<32>(tmp1_fu_324_p2.read()));
}

void matrix_vector::thread_V_Out_we0() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_enable_reg_pp0_iter6.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(exitcond1_reg_334_pp0_iter5_reg.read(), ap_const_lv1_0))) {
        V_Out_we0 = ap_const_logic_1;
    } else {
        V_Out_we0 = ap_const_logic_0;
    }
}

void matrix_vector::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[1];
}

void matrix_vector::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void matrix_vector::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[2];
}

void matrix_vector::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void matrix_vector::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void matrix_vector::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void matrix_vector::thread_ap_block_state2_pp0_stage0_iter0() {
    ap_block_state2_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void matrix_vector::thread_ap_block_state3_pp0_stage0_iter1() {
    ap_block_state3_pp0_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void matrix_vector::thread_ap_block_state4_pp0_stage0_iter2() {
    ap_block_state4_pp0_stage0_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void matrix_vector::thread_ap_block_state5_pp0_stage0_iter3() {
    ap_block_state5_pp0_stage0_iter3 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void matrix_vector::thread_ap_block_state6_pp0_stage0_iter4() {
    ap_block_state6_pp0_stage0_iter4 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void matrix_vector::thread_ap_block_state7_pp0_stage0_iter5() {
    ap_block_state7_pp0_stage0_iter5 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void matrix_vector::thread_ap_block_state8_pp0_stage0_iter6() {
    ap_block_state8_pp0_stage0_iter6 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void matrix_vector::thread_ap_condition_pp0_exit_iter0_state2() {
    if (esl_seteq<1,1,1>(exitcond1_fu_246_p2.read(), ap_const_lv1_1)) {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_0;
    }
}

void matrix_vector::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void matrix_vector::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void matrix_vector::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void matrix_vector::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter3.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter4.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter5.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter6.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void matrix_vector::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void matrix_vector::thread_exitcond1_fu_246_p2() {
    exitcond1_fu_246_p2 = (!i_reg_235.read().is_01() || !ap_const_lv4_8.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_235.read() == ap_const_lv4_8);
}

void matrix_vector::thread_i_1_fu_252_p2() {
    i_1_fu_252_p2 = (!i_reg_235.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(i_reg_235.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void matrix_vector::thread_tmp1_fu_324_p2() {
    tmp1_fu_324_p2 = (!tmp3_reg_513.read().is_01() || !tmp2_reg_508.read().is_01())? sc_lv<32>(): (sc_biguint<32>(tmp3_reg_513.read()) + sc_biguint<32>(tmp2_reg_508.read()));
}

void matrix_vector::thread_tmp2_fu_302_p2() {
    tmp2_fu_302_p2 = (!tmp_3_reg_468.read().is_01() || !tmp_3_1_reg_473.read().is_01())? sc_lv<32>(): (sc_biguint<32>(tmp_3_reg_468.read()) + sc_biguint<32>(tmp_3_1_reg_473.read()));
}

void matrix_vector::thread_tmp3_fu_306_p2() {
    tmp3_fu_306_p2 = (!tmp_3_2_reg_478.read().is_01() || !tmp_3_3_reg_483.read().is_01())? sc_lv<32>(): (sc_biguint<32>(tmp_3_2_reg_478.read()) + sc_biguint<32>(tmp_3_3_reg_483.read()));
}

void matrix_vector::thread_tmp4_fu_318_p2() {
    tmp4_fu_318_p2 = (!tmp6_fu_314_p2.read().is_01() || !tmp5_fu_310_p2.read().is_01())? sc_lv<32>(): (sc_biguint<32>(tmp6_fu_314_p2.read()) + sc_biguint<32>(tmp5_fu_310_p2.read()));
}

void matrix_vector::thread_tmp5_fu_310_p2() {
    tmp5_fu_310_p2 = (!tmp_3_4_reg_488.read().is_01() || !tmp_3_5_reg_493.read().is_01())? sc_lv<32>(): (sc_biguint<32>(tmp_3_4_reg_488.read()) + sc_biguint<32>(tmp_3_5_reg_493.read()));
}

void matrix_vector::thread_tmp6_fu_314_p2() {
    tmp6_fu_314_p2 = (!tmp_3_6_reg_498.read().is_01() || !tmp_3_7_reg_503.read().is_01())? sc_lv<32>(): (sc_biguint<32>(tmp_3_6_reg_498.read()) + sc_biguint<32>(tmp_3_7_reg_503.read()));
}

void matrix_vector::thread_tmp_fu_258_p1() {
    tmp_fu_258_p1 = esl_zext<64,4>(i_reg_235.read());
}

void matrix_vector::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((!(esl_seteq<1,1,1>(exitcond1_fu_246_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0) && esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read()) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1)) && !(esl_seteq<1,1,1>(ap_enable_reg_pp0_iter5.read(), ap_const_logic_0) && esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read()) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter6.read(), ap_const_logic_1)))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if (((esl_seteq<1,1,1>(ap_enable_reg_pp0_iter5.read(), ap_const_logic_0) && 
  esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read()) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter6.read(), ap_const_logic_1)) || (esl_seteq<1,1,1>(exitcond1_fu_246_p2.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0) && 
  esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read()) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1)))) {
                ap_NS_fsm = ap_ST_fsm_state9;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "XXX";
            break;
    }
}

void matrix_vector::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"M_0_address0\" :  \"" << M_0_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"M_0_ce0\" :  \"" << M_0_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"M_0_q0\" :  \"" << M_0_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"M_1_address0\" :  \"" << M_1_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"M_1_ce0\" :  \"" << M_1_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"M_1_q0\" :  \"" << M_1_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"M_2_address0\" :  \"" << M_2_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"M_2_ce0\" :  \"" << M_2_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"M_2_q0\" :  \"" << M_2_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"M_3_address0\" :  \"" << M_3_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"M_3_ce0\" :  \"" << M_3_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"M_3_q0\" :  \"" << M_3_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"M_4_address0\" :  \"" << M_4_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"M_4_ce0\" :  \"" << M_4_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"M_4_q0\" :  \"" << M_4_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"M_5_address0\" :  \"" << M_5_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"M_5_ce0\" :  \"" << M_5_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"M_5_q0\" :  \"" << M_5_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"M_6_address0\" :  \"" << M_6_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"M_6_ce0\" :  \"" << M_6_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"M_6_q0\" :  \"" << M_6_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"M_7_address0\" :  \"" << M_7_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"M_7_ce0\" :  \"" << M_7_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"M_7_q0\" :  \"" << M_7_q0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"V_In_0\" :  \"" << V_In_0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"V_In_1\" :  \"" << V_In_1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"V_In_2\" :  \"" << V_In_2.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"V_In_3\" :  \"" << V_In_3.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"V_In_4\" :  \"" << V_In_4.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"V_In_5\" :  \"" << V_In_5.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"V_In_6\" :  \"" << V_In_6.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"V_In_7\" :  \"" << V_In_7.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"V_Out_address0\" :  \"" << V_Out_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"V_Out_ce0\" :  \"" << V_Out_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"V_Out_we0\" :  \"" << V_Out_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"V_Out_d0\" :  \"" << V_Out_d0.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

