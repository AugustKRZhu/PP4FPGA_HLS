// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="matrix_vector,hls_ip_2018_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7v585tffg1761-2,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.108000,HLS_SYN_LAT=15,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=32,HLS_SYN_FF=2851,HLS_SYN_LUT=1033,HLS_VERSION=2018_2}" *)

module matrix_vector (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        M_0_address0,
        M_0_ce0,
        M_0_q0,
        M_1_address0,
        M_1_ce0,
        M_1_q0,
        M_2_address0,
        M_2_ce0,
        M_2_q0,
        M_3_address0,
        M_3_ce0,
        M_3_q0,
        M_4_address0,
        M_4_ce0,
        M_4_q0,
        M_5_address0,
        M_5_ce0,
        M_5_q0,
        M_6_address0,
        M_6_ce0,
        M_6_q0,
        M_7_address0,
        M_7_ce0,
        M_7_q0,
        V_In_0,
        V_In_1,
        V_In_2,
        V_In_3,
        V_In_4,
        V_In_5,
        V_In_6,
        V_In_7,
        V_Out_address0,
        V_Out_ce0,
        V_Out_we0,
        V_Out_d0
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state9 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [2:0] M_0_address0;
output   M_0_ce0;
input  [31:0] M_0_q0;
output  [2:0] M_1_address0;
output   M_1_ce0;
input  [31:0] M_1_q0;
output  [2:0] M_2_address0;
output   M_2_ce0;
input  [31:0] M_2_q0;
output  [2:0] M_3_address0;
output   M_3_ce0;
input  [31:0] M_3_q0;
output  [2:0] M_4_address0;
output   M_4_ce0;
input  [31:0] M_4_q0;
output  [2:0] M_5_address0;
output   M_5_ce0;
input  [31:0] M_5_q0;
output  [2:0] M_6_address0;
output   M_6_ce0;
input  [31:0] M_6_q0;
output  [2:0] M_7_address0;
output   M_7_ce0;
input  [31:0] M_7_q0;
input  [31:0] V_In_0;
input  [31:0] V_In_1;
input  [31:0] V_In_2;
input  [31:0] V_In_3;
input  [31:0] V_In_4;
input  [31:0] V_In_5;
input  [31:0] V_In_6;
input  [31:0] V_In_7;
output  [2:0] V_Out_address0;
output   V_Out_ce0;
output   V_Out_we0;
output  [31:0] V_Out_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg M_0_ce0;
reg M_1_ce0;
reg M_2_ce0;
reg M_3_ce0;
reg M_4_ce0;
reg M_5_ce0;
reg M_6_ce0;
reg M_7_ce0;
reg V_Out_ce0;
reg V_Out_we0;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [3:0] i_reg_235;
wire   [0:0] exitcond1_fu_246_p2;
reg   [0:0] exitcond1_reg_334;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_state8_pp0_stage0_iter6;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] exitcond1_reg_334_pp0_iter1_reg;
reg   [0:0] exitcond1_reg_334_pp0_iter2_reg;
reg   [0:0] exitcond1_reg_334_pp0_iter3_reg;
reg   [0:0] exitcond1_reg_334_pp0_iter4_reg;
reg   [0:0] exitcond1_reg_334_pp0_iter5_reg;
wire   [3:0] i_1_fu_252_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [63:0] tmp_fu_258_p1;
reg   [63:0] tmp_reg_343;
reg   [63:0] tmp_reg_343_pp0_iter1_reg;
reg   [63:0] tmp_reg_343_pp0_iter2_reg;
reg   [63:0] tmp_reg_343_pp0_iter3_reg;
reg   [63:0] tmp_reg_343_pp0_iter4_reg;
reg   [63:0] tmp_reg_343_pp0_iter5_reg;
reg  signed [31:0] V_In_0_read_reg_348;
reg  signed [31:0] V_In_0_read_reg_348_pp0_iter1_reg;
reg  signed [31:0] V_In_1_read_reg_358;
reg  signed [31:0] V_In_1_read_reg_358_pp0_iter1_reg;
reg  signed [31:0] V_In_2_read_reg_368;
reg  signed [31:0] V_In_2_read_reg_368_pp0_iter1_reg;
reg  signed [31:0] V_In_3_read_reg_378;
reg  signed [31:0] V_In_3_read_reg_378_pp0_iter1_reg;
reg  signed [31:0] V_In_4_read_reg_388;
reg  signed [31:0] V_In_4_read_reg_388_pp0_iter1_reg;
reg  signed [31:0] V_In_5_read_reg_398;
reg  signed [31:0] V_In_5_read_reg_398_pp0_iter1_reg;
reg  signed [31:0] V_In_6_read_reg_408;
reg  signed [31:0] V_In_6_read_reg_408_pp0_iter1_reg;
reg  signed [31:0] V_In_7_read_reg_418;
reg  signed [31:0] V_In_7_read_reg_418_pp0_iter1_reg;
reg  signed [31:0] M_0_load_reg_428;
reg  signed [31:0] M_1_load_reg_433;
reg  signed [31:0] M_2_load_reg_438;
reg  signed [31:0] M_3_load_reg_443;
reg  signed [31:0] M_4_load_reg_448;
reg  signed [31:0] M_5_load_reg_453;
reg  signed [31:0] M_6_load_reg_458;
reg  signed [31:0] M_7_load_reg_463;
wire   [31:0] grp_fu_270_p2;
reg   [31:0] tmp_3_reg_468;
wire   [31:0] grp_fu_274_p2;
reg   [31:0] tmp_3_1_reg_473;
wire   [31:0] grp_fu_278_p2;
reg   [31:0] tmp_3_2_reg_478;
wire   [31:0] grp_fu_282_p2;
reg   [31:0] tmp_3_3_reg_483;
wire   [31:0] grp_fu_286_p2;
reg   [31:0] tmp_3_4_reg_488;
wire   [31:0] grp_fu_290_p2;
reg   [31:0] tmp_3_5_reg_493;
wire   [31:0] grp_fu_294_p2;
reg   [31:0] tmp_3_6_reg_498;
wire   [31:0] grp_fu_298_p2;
reg   [31:0] tmp_3_7_reg_503;
wire   [31:0] tmp2_fu_302_p2;
reg   [31:0] tmp2_reg_508;
wire   [31:0] tmp3_fu_306_p2;
reg   [31:0] tmp3_reg_513;
wire   [31:0] tmp4_fu_318_p2;
reg   [31:0] tmp4_reg_518;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
wire    ap_block_pp0_stage0;
wire   [31:0] tmp6_fu_314_p2;
wire   [31:0] tmp5_fu_310_p2;
wire   [31:0] tmp1_fu_324_p2;
wire    ap_CS_fsm_state9;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
end

matrix_vector_mulbkb #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matrix_vector_mulbkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(V_In_0_read_reg_348_pp0_iter1_reg),
    .din1(M_0_load_reg_428),
    .ce(1'b1),
    .dout(grp_fu_270_p2)
);

matrix_vector_mulbkb #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matrix_vector_mulbkb_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(V_In_1_read_reg_358_pp0_iter1_reg),
    .din1(M_1_load_reg_433),
    .ce(1'b1),
    .dout(grp_fu_274_p2)
);

matrix_vector_mulbkb #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matrix_vector_mulbkb_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(V_In_2_read_reg_368_pp0_iter1_reg),
    .din1(M_2_load_reg_438),
    .ce(1'b1),
    .dout(grp_fu_278_p2)
);

matrix_vector_mulbkb #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matrix_vector_mulbkb_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(V_In_3_read_reg_378_pp0_iter1_reg),
    .din1(M_3_load_reg_443),
    .ce(1'b1),
    .dout(grp_fu_282_p2)
);

matrix_vector_mulbkb #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matrix_vector_mulbkb_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(V_In_4_read_reg_388_pp0_iter1_reg),
    .din1(M_4_load_reg_448),
    .ce(1'b1),
    .dout(grp_fu_286_p2)
);

matrix_vector_mulbkb #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matrix_vector_mulbkb_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(V_In_5_read_reg_398_pp0_iter1_reg),
    .din1(M_5_load_reg_453),
    .ce(1'b1),
    .dout(grp_fu_290_p2)
);

matrix_vector_mulbkb #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matrix_vector_mulbkb_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(V_In_6_read_reg_408_pp0_iter1_reg),
    .din1(M_6_load_reg_458),
    .ce(1'b1),
    .dout(grp_fu_294_p2)
);

matrix_vector_mulbkb #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matrix_vector_mulbkb_U8(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(V_In_7_read_reg_418_pp0_iter1_reg),
    .din1(M_7_load_reg_463),
    .ce(1'b1),
    .dout(grp_fu_298_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter6 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_246_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_reg_235 <= i_1_fu_252_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_235 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_reg_334 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        M_0_load_reg_428 <= M_0_q0;
        M_1_load_reg_433 <= M_1_q0;
        M_2_load_reg_438 <= M_2_q0;
        M_3_load_reg_443 <= M_3_q0;
        M_4_load_reg_448 <= M_4_q0;
        M_5_load_reg_453 <= M_5_q0;
        M_6_load_reg_458 <= M_6_q0;
        M_7_load_reg_463 <= M_7_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_246_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        V_In_0_read_reg_348 <= V_In_0;
        V_In_1_read_reg_358 <= V_In_1;
        V_In_2_read_reg_368 <= V_In_2;
        V_In_3_read_reg_378 <= V_In_3;
        V_In_4_read_reg_388 <= V_In_4;
        V_In_5_read_reg_398 <= V_In_5;
        V_In_6_read_reg_408 <= V_In_6;
        V_In_7_read_reg_418 <= V_In_7;
        tmp_reg_343[3 : 0] <= tmp_fu_258_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        V_In_0_read_reg_348_pp0_iter1_reg <= V_In_0_read_reg_348;
        V_In_1_read_reg_358_pp0_iter1_reg <= V_In_1_read_reg_358;
        V_In_2_read_reg_368_pp0_iter1_reg <= V_In_2_read_reg_368;
        V_In_3_read_reg_378_pp0_iter1_reg <= V_In_3_read_reg_378;
        V_In_4_read_reg_388_pp0_iter1_reg <= V_In_4_read_reg_388;
        V_In_5_read_reg_398_pp0_iter1_reg <= V_In_5_read_reg_398;
        V_In_6_read_reg_408_pp0_iter1_reg <= V_In_6_read_reg_408;
        V_In_7_read_reg_418_pp0_iter1_reg <= V_In_7_read_reg_418;
        exitcond1_reg_334 <= exitcond1_fu_246_p2;
        exitcond1_reg_334_pp0_iter1_reg <= exitcond1_reg_334;
        tmp_reg_343_pp0_iter1_reg[3 : 0] <= tmp_reg_343[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        exitcond1_reg_334_pp0_iter2_reg <= exitcond1_reg_334_pp0_iter1_reg;
        exitcond1_reg_334_pp0_iter3_reg <= exitcond1_reg_334_pp0_iter2_reg;
        exitcond1_reg_334_pp0_iter4_reg <= exitcond1_reg_334_pp0_iter3_reg;
        exitcond1_reg_334_pp0_iter5_reg <= exitcond1_reg_334_pp0_iter4_reg;
        tmp_reg_343_pp0_iter2_reg[3 : 0] <= tmp_reg_343_pp0_iter1_reg[3 : 0];
        tmp_reg_343_pp0_iter3_reg[3 : 0] <= tmp_reg_343_pp0_iter2_reg[3 : 0];
        tmp_reg_343_pp0_iter4_reg[3 : 0] <= tmp_reg_343_pp0_iter3_reg[3 : 0];
        tmp_reg_343_pp0_iter5_reg[3 : 0] <= tmp_reg_343_pp0_iter4_reg[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_reg_334_pp0_iter4_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp2_reg_508 <= tmp2_fu_302_p2;
        tmp3_reg_513 <= tmp3_fu_306_p2;
        tmp4_reg_518 <= tmp4_fu_318_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_reg_334_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_3_1_reg_473 <= grp_fu_274_p2;
        tmp_3_2_reg_478 <= grp_fu_278_p2;
        tmp_3_3_reg_483 <= grp_fu_282_p2;
        tmp_3_4_reg_488 <= grp_fu_286_p2;
        tmp_3_5_reg_493 <= grp_fu_290_p2;
        tmp_3_6_reg_498 <= grp_fu_294_p2;
        tmp_3_7_reg_503 <= grp_fu_298_p2;
        tmp_3_reg_468 <= grp_fu_270_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        M_0_ce0 = 1'b1;
    end else begin
        M_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        M_1_ce0 = 1'b1;
    end else begin
        M_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        M_2_ce0 = 1'b1;
    end else begin
        M_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        M_3_ce0 = 1'b1;
    end else begin
        M_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        M_4_ce0 = 1'b1;
    end else begin
        M_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        M_5_ce0 = 1'b1;
    end else begin
        M_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        M_6_ce0 = 1'b1;
    end else begin
        M_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        M_7_ce0 = 1'b1;
    end else begin
        M_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        V_Out_ce0 = 1'b1;
    end else begin
        V_Out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (exitcond1_reg_334_pp0_iter5_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        V_Out_we0 = 1'b1;
    end else begin
        V_Out_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond1_fu_246_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((exitcond1_fu_246_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((ap_enable_reg_pp0_iter5 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter6 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter5 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter6 == 1'b1)) | ((exitcond1_fu_246_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign M_0_address0 = tmp_fu_258_p1;

assign M_1_address0 = tmp_fu_258_p1;

assign M_2_address0 = tmp_fu_258_p1;

assign M_3_address0 = tmp_fu_258_p1;

assign M_4_address0 = tmp_fu_258_p1;

assign M_5_address0 = tmp_fu_258_p1;

assign M_6_address0 = tmp_fu_258_p1;

assign M_7_address0 = tmp_fu_258_p1;

assign V_Out_address0 = tmp_reg_343_pp0_iter5_reg;

assign V_Out_d0 = (tmp4_reg_518 + tmp1_fu_324_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign exitcond1_fu_246_p2 = ((i_reg_235 == 4'd8) ? 1'b1 : 1'b0);

assign i_1_fu_252_p2 = (i_reg_235 + 4'd1);

assign tmp1_fu_324_p2 = (tmp3_reg_513 + tmp2_reg_508);

assign tmp2_fu_302_p2 = (tmp_3_reg_468 + tmp_3_1_reg_473);

assign tmp3_fu_306_p2 = (tmp_3_2_reg_478 + tmp_3_3_reg_483);

assign tmp4_fu_318_p2 = (tmp6_fu_314_p2 + tmp5_fu_310_p2);

assign tmp5_fu_310_p2 = (tmp_3_4_reg_488 + tmp_3_5_reg_493);

assign tmp6_fu_314_p2 = (tmp_3_6_reg_498 + tmp_3_7_reg_503);

assign tmp_fu_258_p1 = i_reg_235;

always @ (posedge ap_clk) begin
    tmp_reg_343[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    tmp_reg_343_pp0_iter1_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    tmp_reg_343_pp0_iter2_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    tmp_reg_343_pp0_iter3_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    tmp_reg_343_pp0_iter4_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    tmp_reg_343_pp0_iter5_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
end

endmodule //matrix_vector
