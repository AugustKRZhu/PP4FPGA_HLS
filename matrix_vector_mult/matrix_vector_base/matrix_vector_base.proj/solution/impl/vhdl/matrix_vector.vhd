-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity matrix_vector is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    M_0_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    M_0_ce0 : OUT STD_LOGIC;
    M_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    M_1_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    M_1_ce0 : OUT STD_LOGIC;
    M_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    M_2_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    M_2_ce0 : OUT STD_LOGIC;
    M_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    M_3_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    M_3_ce0 : OUT STD_LOGIC;
    M_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    M_4_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    M_4_ce0 : OUT STD_LOGIC;
    M_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    M_5_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    M_5_ce0 : OUT STD_LOGIC;
    M_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    M_6_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    M_6_ce0 : OUT STD_LOGIC;
    M_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    M_7_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    M_7_ce0 : OUT STD_LOGIC;
    M_7_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    V_In_0 : IN STD_LOGIC_VECTOR (31 downto 0);
    V_In_1 : IN STD_LOGIC_VECTOR (31 downto 0);
    V_In_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    V_In_3 : IN STD_LOGIC_VECTOR (31 downto 0);
    V_In_4 : IN STD_LOGIC_VECTOR (31 downto 0);
    V_In_5 : IN STD_LOGIC_VECTOR (31 downto 0);
    V_In_6 : IN STD_LOGIC_VECTOR (31 downto 0);
    V_In_7 : IN STD_LOGIC_VECTOR (31 downto 0);
    V_Out_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    V_Out_ce0 : OUT STD_LOGIC;
    V_Out_we0 : OUT STD_LOGIC;
    V_Out_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of matrix_vector is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "matrix_vector,hls_ip_2018_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7v585tffg1761-2,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.108000,HLS_SYN_LAT=15,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=32,HLS_SYN_FF=2851,HLS_SYN_LUT=1033,HLS_VERSION=2018_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_reg_235 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond1_fu_246_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond1_reg_334 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal exitcond1_reg_334_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond1_reg_334_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond1_reg_334_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond1_reg_334_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond1_reg_334_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_fu_252_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_fu_258_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_reg_343 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_reg_343_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_reg_343_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_reg_343_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_reg_343_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_reg_343_pp0_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal V_In_0_read_reg_348 : STD_LOGIC_VECTOR (31 downto 0);
    signal V_In_0_read_reg_348_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal V_In_1_read_reg_358 : STD_LOGIC_VECTOR (31 downto 0);
    signal V_In_1_read_reg_358_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal V_In_2_read_reg_368 : STD_LOGIC_VECTOR (31 downto 0);
    signal V_In_2_read_reg_368_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal V_In_3_read_reg_378 : STD_LOGIC_VECTOR (31 downto 0);
    signal V_In_3_read_reg_378_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal V_In_4_read_reg_388 : STD_LOGIC_VECTOR (31 downto 0);
    signal V_In_4_read_reg_388_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal V_In_5_read_reg_398 : STD_LOGIC_VECTOR (31 downto 0);
    signal V_In_5_read_reg_398_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal V_In_6_read_reg_408 : STD_LOGIC_VECTOR (31 downto 0);
    signal V_In_6_read_reg_408_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal V_In_7_read_reg_418 : STD_LOGIC_VECTOR (31 downto 0);
    signal V_In_7_read_reg_418_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal M_0_load_reg_428 : STD_LOGIC_VECTOR (31 downto 0);
    signal M_1_load_reg_433 : STD_LOGIC_VECTOR (31 downto 0);
    signal M_2_load_reg_438 : STD_LOGIC_VECTOR (31 downto 0);
    signal M_3_load_reg_443 : STD_LOGIC_VECTOR (31 downto 0);
    signal M_4_load_reg_448 : STD_LOGIC_VECTOR (31 downto 0);
    signal M_5_load_reg_453 : STD_LOGIC_VECTOR (31 downto 0);
    signal M_6_load_reg_458 : STD_LOGIC_VECTOR (31 downto 0);
    signal M_7_load_reg_463 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_270_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_reg_468 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_274_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_1_reg_473 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_278_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_2_reg_478 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_282_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_3_reg_483 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_286_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_4_reg_488 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_290_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_5_reg_493 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_294_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_6_reg_498 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_298_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_7_reg_503 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp2_fu_302_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp2_reg_508 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp3_fu_306_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp3_reg_513 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp4_fu_318_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp4_reg_518 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal tmp6_fu_314_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp5_fu_310_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_fu_324_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component matrix_vector_mulbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    matrix_vector_mulbkb_U1 : component matrix_vector_mulbkb
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => V_In_0_read_reg_348_pp0_iter1_reg,
        din1 => M_0_load_reg_428,
        ce => ap_const_logic_1,
        dout => grp_fu_270_p2);

    matrix_vector_mulbkb_U2 : component matrix_vector_mulbkb
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => V_In_1_read_reg_358_pp0_iter1_reg,
        din1 => M_1_load_reg_433,
        ce => ap_const_logic_1,
        dout => grp_fu_274_p2);

    matrix_vector_mulbkb_U3 : component matrix_vector_mulbkb
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => V_In_2_read_reg_368_pp0_iter1_reg,
        din1 => M_2_load_reg_438,
        ce => ap_const_logic_1,
        dout => grp_fu_278_p2);

    matrix_vector_mulbkb_U4 : component matrix_vector_mulbkb
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => V_In_3_read_reg_378_pp0_iter1_reg,
        din1 => M_3_load_reg_443,
        ce => ap_const_logic_1,
        dout => grp_fu_282_p2);

    matrix_vector_mulbkb_U5 : component matrix_vector_mulbkb
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => V_In_4_read_reg_388_pp0_iter1_reg,
        din1 => M_4_load_reg_448,
        ce => ap_const_logic_1,
        dout => grp_fu_286_p2);

    matrix_vector_mulbkb_U6 : component matrix_vector_mulbkb
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => V_In_5_read_reg_398_pp0_iter1_reg,
        din1 => M_5_load_reg_453,
        ce => ap_const_logic_1,
        dout => grp_fu_290_p2);

    matrix_vector_mulbkb_U7 : component matrix_vector_mulbkb
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => V_In_6_read_reg_408_pp0_iter1_reg,
        din1 => M_6_load_reg_458,
        ce => ap_const_logic_1,
        dout => grp_fu_294_p2);

    matrix_vector_mulbkb_U8 : component matrix_vector_mulbkb
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => V_In_7_read_reg_418_pp0_iter1_reg,
        din1 => M_7_load_reg_463,
        ce => ap_const_logic_1,
        dout => grp_fu_298_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_235_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_246_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                i_reg_235 <= i_1_fu_252_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_235 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_reg_334 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                M_0_load_reg_428 <= M_0_q0;
                M_1_load_reg_433 <= M_1_q0;
                M_2_load_reg_438 <= M_2_q0;
                M_3_load_reg_443 <= M_3_q0;
                M_4_load_reg_448 <= M_4_q0;
                M_5_load_reg_453 <= M_5_q0;
                M_6_load_reg_458 <= M_6_q0;
                M_7_load_reg_463 <= M_7_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_246_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                V_In_0_read_reg_348 <= V_In_0;
                V_In_1_read_reg_358 <= V_In_1;
                V_In_2_read_reg_368 <= V_In_2;
                V_In_3_read_reg_378 <= V_In_3;
                V_In_4_read_reg_388 <= V_In_4;
                V_In_5_read_reg_398 <= V_In_5;
                V_In_6_read_reg_408 <= V_In_6;
                V_In_7_read_reg_418 <= V_In_7;
                    tmp_reg_343(3 downto 0) <= tmp_fu_258_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                V_In_0_read_reg_348_pp0_iter1_reg <= V_In_0_read_reg_348;
                V_In_1_read_reg_358_pp0_iter1_reg <= V_In_1_read_reg_358;
                V_In_2_read_reg_368_pp0_iter1_reg <= V_In_2_read_reg_368;
                V_In_3_read_reg_378_pp0_iter1_reg <= V_In_3_read_reg_378;
                V_In_4_read_reg_388_pp0_iter1_reg <= V_In_4_read_reg_388;
                V_In_5_read_reg_398_pp0_iter1_reg <= V_In_5_read_reg_398;
                V_In_6_read_reg_408_pp0_iter1_reg <= V_In_6_read_reg_408;
                V_In_7_read_reg_418_pp0_iter1_reg <= V_In_7_read_reg_418;
                exitcond1_reg_334 <= exitcond1_fu_246_p2;
                exitcond1_reg_334_pp0_iter1_reg <= exitcond1_reg_334;
                    tmp_reg_343_pp0_iter1_reg(3 downto 0) <= tmp_reg_343(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                exitcond1_reg_334_pp0_iter2_reg <= exitcond1_reg_334_pp0_iter1_reg;
                exitcond1_reg_334_pp0_iter3_reg <= exitcond1_reg_334_pp0_iter2_reg;
                exitcond1_reg_334_pp0_iter4_reg <= exitcond1_reg_334_pp0_iter3_reg;
                exitcond1_reg_334_pp0_iter5_reg <= exitcond1_reg_334_pp0_iter4_reg;
                    tmp_reg_343_pp0_iter2_reg(3 downto 0) <= tmp_reg_343_pp0_iter1_reg(3 downto 0);
                    tmp_reg_343_pp0_iter3_reg(3 downto 0) <= tmp_reg_343_pp0_iter2_reg(3 downto 0);
                    tmp_reg_343_pp0_iter4_reg(3 downto 0) <= tmp_reg_343_pp0_iter3_reg(3 downto 0);
                    tmp_reg_343_pp0_iter5_reg(3 downto 0) <= tmp_reg_343_pp0_iter4_reg(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_reg_334_pp0_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp2_reg_508 <= tmp2_fu_302_p2;
                tmp3_reg_513 <= tmp3_fu_306_p2;
                tmp4_reg_518 <= tmp4_fu_318_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_reg_334_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_3_1_reg_473 <= grp_fu_274_p2;
                tmp_3_2_reg_478 <= grp_fu_278_p2;
                tmp_3_3_reg_483 <= grp_fu_282_p2;
                tmp_3_4_reg_488 <= grp_fu_286_p2;
                tmp_3_5_reg_493 <= grp_fu_290_p2;
                tmp_3_6_reg_498 <= grp_fu_294_p2;
                tmp_3_7_reg_503 <= grp_fu_298_p2;
                tmp_3_reg_468 <= grp_fu_270_p2;
            end if;
        end if;
    end process;
    tmp_reg_343(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    tmp_reg_343_pp0_iter1_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    tmp_reg_343_pp0_iter2_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    tmp_reg_343_pp0_iter3_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    tmp_reg_343_pp0_iter4_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    tmp_reg_343_pp0_iter5_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, exitcond1_fu_246_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((exitcond1_fu_246_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1)) or ((exitcond1_fu_246_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    M_0_address0 <= tmp_fu_258_p1(3 - 1 downto 0);

    M_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            M_0_ce0 <= ap_const_logic_1;
        else 
            M_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    M_1_address0 <= tmp_fu_258_p1(3 - 1 downto 0);

    M_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            M_1_ce0 <= ap_const_logic_1;
        else 
            M_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    M_2_address0 <= tmp_fu_258_p1(3 - 1 downto 0);

    M_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            M_2_ce0 <= ap_const_logic_1;
        else 
            M_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    M_3_address0 <= tmp_fu_258_p1(3 - 1 downto 0);

    M_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            M_3_ce0 <= ap_const_logic_1;
        else 
            M_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    M_4_address0 <= tmp_fu_258_p1(3 - 1 downto 0);

    M_4_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            M_4_ce0 <= ap_const_logic_1;
        else 
            M_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    M_5_address0 <= tmp_fu_258_p1(3 - 1 downto 0);

    M_5_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            M_5_ce0 <= ap_const_logic_1;
        else 
            M_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    M_6_address0 <= tmp_fu_258_p1(3 - 1 downto 0);

    M_6_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            M_6_ce0 <= ap_const_logic_1;
        else 
            M_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    M_7_address0 <= tmp_fu_258_p1(3 - 1 downto 0);

    M_7_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            M_7_ce0 <= ap_const_logic_1;
        else 
            M_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    V_Out_address0 <= tmp_reg_343_pp0_iter5_reg(3 - 1 downto 0);

    V_Out_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            V_Out_ce0 <= ap_const_logic_1;
        else 
            V_Out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    V_Out_d0 <= std_logic_vector(unsigned(tmp4_reg_518) + unsigned(tmp1_fu_324_p2));

    V_Out_we0_assign_proc : process(ap_block_pp0_stage0_11001, exitcond1_reg_334_pp0_iter5_reg, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (exitcond1_reg_334_pp0_iter5_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            V_Out_we0 <= ap_const_logic_1;
        else 
            V_Out_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state9 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(exitcond1_fu_246_p2)
    begin
        if ((exitcond1_fu_246_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_246_p2 <= "1" when (i_reg_235 = ap_const_lv4_8) else "0";
    i_1_fu_252_p2 <= std_logic_vector(unsigned(i_reg_235) + unsigned(ap_const_lv4_1));
    tmp1_fu_324_p2 <= std_logic_vector(unsigned(tmp3_reg_513) + unsigned(tmp2_reg_508));
    tmp2_fu_302_p2 <= std_logic_vector(unsigned(tmp_3_reg_468) + unsigned(tmp_3_1_reg_473));
    tmp3_fu_306_p2 <= std_logic_vector(unsigned(tmp_3_2_reg_478) + unsigned(tmp_3_3_reg_483));
    tmp4_fu_318_p2 <= std_logic_vector(unsigned(tmp6_fu_314_p2) + unsigned(tmp5_fu_310_p2));
    tmp5_fu_310_p2 <= std_logic_vector(unsigned(tmp_3_4_reg_488) + unsigned(tmp_3_5_reg_493));
    tmp6_fu_314_p2 <= std_logic_vector(unsigned(tmp_3_6_reg_498) + unsigned(tmp_3_7_reg_503));
    tmp_fu_258_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_235),64));
end behav;
