// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fir,hls_ip_2018_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xa7a12tcsg325-1q,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.470000,HLS_SYN_LAT=63,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=3,HLS_SYN_FF=940,HLS_SYN_LUT=681,HLS_VERSION=2018_2}" *)

module fir (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        y,
        y_ap_vld,
        c_address0,
        c_ce0,
        c_q0,
        x
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_state8 = 11'd128;
parameter    ap_ST_fsm_state9 = 11'd256;
parameter    ap_ST_fsm_state10 = 11'd512;
parameter    ap_ST_fsm_state11 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [31:0] y;
output   y_ap_vld;
output  [3:0] c_address0;
output   c_ce0;
input  [31:0] c_q0;
input  [31:0] x;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg y_ap_vld;
reg c_ce0;

(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] shift_reg_9;
reg   [31:0] shift_reg_5;
reg   [31:0] shift_reg_1;
reg   [31:0] shift_reg_0;
reg   [31:0] shift_reg_2;
reg   [31:0] shift_reg_4;
reg   [31:0] shift_reg_6;
reg   [31:0] shift_reg_8;
reg   [31:0] shift_reg_10;
reg   [31:0] shift_reg_3;
reg   [31:0] shift_reg_7;
reg   [31:0] reg_289;
wire    ap_CS_fsm_state5;
reg   [3:0] tmp_2_reg_583;
wire    ap_CS_fsm_state7;
reg   [31:0] reg_295;
reg   [31:0] reg_301;
reg   [31:0] reg_307;
reg   [31:0] reg_313;
wire   [3:0] tmp_2_fu_325_p1;
wire    ap_CS_fsm_state2;
wire   [0:0] tmp_fu_319_p2;
wire   [4:0] i_2_1_fu_399_p2;
reg   [4:0] i_2_1_reg_591;
wire   [0:0] tmp_1_fu_393_p2;
wire   [3:0] i_2_2_cast_fu_440_p2;
reg   [3:0] i_2_2_cast_reg_604;
wire    ap_CS_fsm_state3;
wire   [0:0] tmp_s_fu_435_p2;
wire   [4:0] i_2_3_fu_490_p2;
reg   [4:0] i_2_3_reg_617;
wire    ap_CS_fsm_state4;
wire   [0:0] tmp_3_fu_485_p2;
reg   [31:0] shift_reg_1_load_2_reg_627;
reg   [31:0] shift_reg_3_load_1_reg_632;
reg   [31:0] shift_reg_5_load_2_reg_637;
reg   [31:0] shift_reg_7_load_1_reg_642;
reg   [31:0] shift_reg_9_load_2_reg_647;
wire    ap_CS_fsm_state8;
wire   [0:0] tmp_4_fu_541_p3;
wire   [4:0] i_3_fu_558_p2;
reg   [4:0] i_3_reg_663;
reg  signed [31:0] c_load_reg_668;
wire    ap_CS_fsm_state9;
wire   [31:0] tmp_6_fu_564_p2;
reg   [31:0] tmp_6_reg_673;
wire    ap_CS_fsm_state10;
wire   [31:0] acc_1_fu_569_p2;
wire    ap_CS_fsm_state11;
reg   [4:0] i_reg_120;
wire    ap_CS_fsm_state6;
reg   [31:0] ap_phi_mux_UnifiedRetVal_i_phi_fu_135_p12;
reg   [31:0] UnifiedRetVal_i_reg_132;
reg   [31:0] ap_phi_mux_UnifiedRetVal_i1_phi_fu_152_p12;
reg   [31:0] UnifiedRetVal_i1_reg_149;
reg   [31:0] UnifiedRetVal_i2_reg_166;
reg   [31:0] acc_reg_183;
reg  signed [4:0] i_1_reg_196;
reg  signed [31:0] UnifiedRetVal_i3_reg_207;
wire   [3:0] tmp_7_fu_554_p1;
wire   [63:0] tmp_5_fu_549_p1;
wire   [31:0] sel_tmp5_fu_355_p3;
wire   [0:0] sel_tmp_fu_335_p2;
wire   [0:0] sel_tmp4_fu_349_p2;
wire   [31:0] sel_tmp1_fu_341_p3;
wire   [4:0] i_2_fu_329_p2;
wire  signed [31:0] i_1_cast_fu_537_p1;
reg   [10:0] ap_NS_fsm;
reg    ap_condition_98;
reg    ap_condition_478;
reg    ap_condition_216;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
#0 shift_reg_9 = 32'd0;
#0 shift_reg_5 = 32'd0;
#0 shift_reg_1 = 32'd0;
#0 shift_reg_0 = 32'd0;
#0 shift_reg_2 = 32'd0;
#0 shift_reg_4 = 32'd0;
#0 shift_reg_6 = 32'd0;
#0 shift_reg_8 = 32'd0;
#0 shift_reg_10 = 32'd0;
#0 shift_reg_3 = 32'd0;
#0 shift_reg_7 = 32'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((~(tmp_2_reg_583 == 4'd4) & ~(tmp_2_reg_583 == 4'd10) & ~(tmp_2_reg_583 == 4'd6) & ~(tmp_2_reg_583 == 4'd12) & ~(tmp_2_reg_583 == 4'd8) & (1'b1 == ap_CS_fsm_state3) & (tmp_s_fu_435_p2 == 1'd1))) begin
        UnifiedRetVal_i1_reg_149 <= shift_reg_10;
    end else if (((tmp_2_reg_583 == 4'd12) & (1'b1 == ap_CS_fsm_state4))) begin
        UnifiedRetVal_i1_reg_149 <= shift_reg_9;
    end else if (((tmp_2_reg_583 == 4'd10) & (1'b1 == ap_CS_fsm_state4))) begin
        UnifiedRetVal_i1_reg_149 <= shift_reg_7;
    end else if (((tmp_2_reg_583 == 4'd8) & (1'b1 == ap_CS_fsm_state4))) begin
        UnifiedRetVal_i1_reg_149 <= shift_reg_5;
    end else if (((tmp_2_reg_583 == 4'd6) & (1'b1 == ap_CS_fsm_state4))) begin
        UnifiedRetVal_i1_reg_149 <= shift_reg_3;
    end else if (((tmp_2_reg_583 == 4'd4) & (1'b1 == ap_CS_fsm_state4))) begin
        UnifiedRetVal_i1_reg_149 <= shift_reg_1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        if ((1'b1 == ap_condition_98)) begin
            UnifiedRetVal_i2_reg_166 <= shift_reg_10;
        end else if ((tmp_2_reg_583 == 4'd12)) begin
            UnifiedRetVal_i2_reg_166 <= shift_reg_8;
        end else if ((tmp_2_reg_583 == 4'd10)) begin
            UnifiedRetVal_i2_reg_166 <= shift_reg_6;
        end else if ((tmp_2_reg_583 == 4'd8)) begin
            UnifiedRetVal_i2_reg_166 <= shift_reg_4;
        end else if ((tmp_2_reg_583 == 4'd6)) begin
            UnifiedRetVal_i2_reg_166 <= shift_reg_2;
        end else if ((tmp_2_reg_583 == 4'd4)) begin
            UnifiedRetVal_i2_reg_166 <= shift_reg_0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (tmp_4_fu_541_p3 == 1'd0))) begin
        if ((tmp_7_fu_554_p1 == 4'd0)) begin
            UnifiedRetVal_i3_reg_207 <= x;
        end else if ((1'b1 == ap_condition_478)) begin
            UnifiedRetVal_i3_reg_207 <= reg_313;
        end else if ((tmp_7_fu_554_p1 == 4'd9)) begin
            UnifiedRetVal_i3_reg_207 <= shift_reg_9_load_2_reg_647;
        end else if ((tmp_7_fu_554_p1 == 4'd8)) begin
            UnifiedRetVal_i3_reg_207 <= reg_295;
        end else if ((tmp_7_fu_554_p1 == 4'd7)) begin
            UnifiedRetVal_i3_reg_207 <= shift_reg_7_load_1_reg_642;
        end else if ((tmp_7_fu_554_p1 == 4'd6)) begin
            UnifiedRetVal_i3_reg_207 <= reg_307;
        end else if ((tmp_7_fu_554_p1 == 4'd5)) begin
            UnifiedRetVal_i3_reg_207 <= shift_reg_5_load_2_reg_637;
        end else if ((tmp_7_fu_554_p1 == 4'd4)) begin
            UnifiedRetVal_i3_reg_207 <= reg_289;
        end else if ((tmp_7_fu_554_p1 == 4'd3)) begin
            UnifiedRetVal_i3_reg_207 <= shift_reg_3_load_1_reg_632;
        end else if ((tmp_7_fu_554_p1 == 4'd2)) begin
            UnifiedRetVal_i3_reg_207 <= reg_301;
        end else if ((tmp_7_fu_554_p1 == 4'd1)) begin
            UnifiedRetVal_i3_reg_207 <= shift_reg_1_load_2_reg_627;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~(tmp_2_reg_583 == 4'd4) & ~(tmp_2_reg_583 == 4'd10) & ~(tmp_2_reg_583 == 4'd6) & ~(tmp_2_reg_583 == 4'd8) & ~(tmp_2_reg_583 == 4'd2) & (1'b1 == ap_CS_fsm_state3))) begin
        UnifiedRetVal_i_reg_132 <= shift_reg_10;
    end else if (((tmp_2_reg_583 == 4'd10) & (1'b1 == ap_CS_fsm_state3))) begin
        UnifiedRetVal_i_reg_132 <= shift_reg_8;
    end else if (((tmp_2_reg_583 == 4'd8) & (1'b1 == ap_CS_fsm_state3))) begin
        UnifiedRetVal_i_reg_132 <= shift_reg_6;
    end else if (((tmp_2_reg_583 == 4'd6) & (1'b1 == ap_CS_fsm_state3))) begin
        UnifiedRetVal_i_reg_132 <= shift_reg_4;
    end else if (((tmp_2_reg_583 == 4'd4) & (1'b1 == ap_CS_fsm_state3))) begin
        UnifiedRetVal_i_reg_132 <= shift_reg_2;
    end else if (((1'b1 == ap_CS_fsm_state2) & (tmp_1_fu_393_p2 == 1'd1) & (tmp_fu_319_p2 == 1'd1) & (tmp_2_fu_325_p1 == 4'd2))) begin
        UnifiedRetVal_i_reg_132 <= shift_reg_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        acc_reg_183 <= acc_1_fu_569_p2;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        acc_reg_183 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        i_1_reg_196 <= i_3_reg_663;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        i_1_reg_196 <= 5'd10;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i_reg_120 <= i_2_3_reg_617;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_120 <= 5'd10;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        shift_reg_0 <= x;
    end else if (((tmp_2_reg_583 == 4'd2) & (1'b1 == ap_CS_fsm_state4))) begin
        shift_reg_0 <= ap_phi_mux_UnifiedRetVal_i1_phi_fu_152_p12;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_2_reg_583 == 4'd4) & (1'b1 == ap_CS_fsm_state6))) begin
        shift_reg_1 <= UnifiedRetVal_i2_reg_166;
    end else if (((tmp_2_reg_583 == 4'd2) & (1'b1 == ap_CS_fsm_state3))) begin
        shift_reg_1 <= ap_phi_mux_UnifiedRetVal_i_phi_fu_135_p12;
    end
end

always @ (posedge ap_clk) begin
    if ((~(tmp_2_reg_583 == 4'd4) & ~(tmp_2_reg_583 == 4'd10) & ~(tmp_2_reg_583 == 4'd6) & ~(tmp_2_reg_583 == 4'd12) & ~(tmp_2_reg_583 == 4'd8) & (1'b1 == ap_CS_fsm_state6))) begin
        shift_reg_10 <= UnifiedRetVal_i2_reg_166;
    end else if ((~(tmp_2_reg_583 == 4'd4) & ~(tmp_2_reg_583 == 4'd10) & ~(tmp_2_reg_583 == 4'd6) & ~(tmp_2_reg_583 == 4'd8) & ~(tmp_2_reg_583 == 4'd2) & (1'b1 == ap_CS_fsm_state4))) begin
        shift_reg_10 <= ap_phi_mux_UnifiedRetVal_i1_phi_fu_152_p12;
    end else if ((~(tmp_2_fu_325_p1 == 4'd8) & ~(tmp_2_fu_325_p1 == 4'd6) & ~(tmp_2_fu_325_p1 == 4'd4) & ~(tmp_2_fu_325_p1 == 4'd2) & (1'b1 == ap_CS_fsm_state2) & (tmp_fu_319_p2 == 1'd1))) begin
        shift_reg_10 <= sel_tmp5_fu_355_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_2_reg_583 == 4'd4) & (1'b1 == ap_CS_fsm_state4))) begin
        shift_reg_2 <= ap_phi_mux_UnifiedRetVal_i1_phi_fu_152_p12;
    end else if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_319_p2 == 1'd1) & (tmp_2_fu_325_p1 == 4'd2))) begin
        shift_reg_2 <= sel_tmp5_fu_355_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_2_reg_583 == 4'd6) & (1'b1 == ap_CS_fsm_state6))) begin
        shift_reg_3 <= UnifiedRetVal_i2_reg_166;
    end else if (((tmp_2_reg_583 == 4'd4) & (1'b1 == ap_CS_fsm_state3))) begin
        shift_reg_3 <= ap_phi_mux_UnifiedRetVal_i_phi_fu_135_p12;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_2_reg_583 == 4'd6) & (1'b1 == ap_CS_fsm_state4))) begin
        shift_reg_4 <= ap_phi_mux_UnifiedRetVal_i1_phi_fu_152_p12;
    end else if (((tmp_2_fu_325_p1 == 4'd4) & (1'b1 == ap_CS_fsm_state2) & (tmp_fu_319_p2 == 1'd1))) begin
        shift_reg_4 <= sel_tmp5_fu_355_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_2_reg_583 == 4'd8) & (1'b1 == ap_CS_fsm_state6))) begin
        shift_reg_5 <= UnifiedRetVal_i2_reg_166;
    end else if (((tmp_2_reg_583 == 4'd6) & (1'b1 == ap_CS_fsm_state3))) begin
        shift_reg_5 <= ap_phi_mux_UnifiedRetVal_i_phi_fu_135_p12;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_2_reg_583 == 4'd8) & (1'b1 == ap_CS_fsm_state4))) begin
        shift_reg_6 <= ap_phi_mux_UnifiedRetVal_i1_phi_fu_152_p12;
    end else if (((tmp_2_fu_325_p1 == 4'd6) & (1'b1 == ap_CS_fsm_state2) & (tmp_fu_319_p2 == 1'd1))) begin
        shift_reg_6 <= sel_tmp5_fu_355_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_2_reg_583 == 4'd10) & (1'b1 == ap_CS_fsm_state6))) begin
        shift_reg_7 <= UnifiedRetVal_i2_reg_166;
    end else if (((tmp_2_reg_583 == 4'd8) & (1'b1 == ap_CS_fsm_state3))) begin
        shift_reg_7 <= ap_phi_mux_UnifiedRetVal_i_phi_fu_135_p12;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_2_reg_583 == 4'd10) & (1'b1 == ap_CS_fsm_state4))) begin
        shift_reg_8 <= ap_phi_mux_UnifiedRetVal_i1_phi_fu_152_p12;
    end else if (((tmp_2_fu_325_p1 == 4'd8) & (1'b1 == ap_CS_fsm_state2) & (tmp_fu_319_p2 == 1'd1))) begin
        shift_reg_8 <= sel_tmp5_fu_355_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_2_reg_583 == 4'd12) & (1'b1 == ap_CS_fsm_state6))) begin
        shift_reg_9 <= UnifiedRetVal_i2_reg_166;
    end else if ((~(tmp_2_reg_583 == 4'd4) & ~(tmp_2_reg_583 == 4'd6) & ~(tmp_2_reg_583 == 4'd8) & ~(tmp_2_reg_583 == 4'd2) & (1'b1 == ap_CS_fsm_state3))) begin
        shift_reg_9 <= ap_phi_mux_UnifiedRetVal_i_phi_fu_135_p12;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        c_load_reg_668 <= c_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_1_fu_393_p2 == 1'd1) & (tmp_fu_319_p2 == 1'd1))) begin
        i_2_1_reg_591 <= i_2_1_fu_399_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (tmp_s_fu_435_p2 == 1'd1))) begin
        i_2_2_cast_reg_604 <= i_2_2_cast_fu_440_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (tmp_3_fu_485_p2 == 1'd1))) begin
        i_2_3_reg_617 <= i_2_3_fu_490_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (tmp_4_fu_541_p3 == 1'd0))) begin
        i_3_reg_663 <= i_3_fu_558_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) | ((tmp_2_reg_583 == 4'd8) & (1'b1 == ap_CS_fsm_state5)))) begin
        reg_289 <= shift_reg_4;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) | ((tmp_2_reg_583 == 4'd12) & (1'b1 == ap_CS_fsm_state5)))) begin
        reg_295 <= shift_reg_8;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) | ((tmp_2_reg_583 == 4'd6) & (1'b1 == ap_CS_fsm_state5)))) begin
        reg_301 <= shift_reg_2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) | ((tmp_2_reg_583 == 4'd10) & (1'b1 == ap_CS_fsm_state5)))) begin
        reg_307 <= shift_reg_6;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) | (~(tmp_2_reg_583 == 4'd4) & ~(tmp_2_reg_583 == 4'd10) & ~(tmp_2_reg_583 == 4'd6) & ~(tmp_2_reg_583 == 4'd12) & ~(tmp_2_reg_583 == 4'd8) & (1'b1 == ap_CS_fsm_state5)))) begin
        reg_313 <= shift_reg_10;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        shift_reg_1_load_2_reg_627 <= shift_reg_1;
        shift_reg_3_load_1_reg_632 <= shift_reg_3;
        shift_reg_5_load_2_reg_637 <= shift_reg_5;
        shift_reg_7_load_1_reg_642 <= shift_reg_7;
        shift_reg_9_load_2_reg_647 <= shift_reg_9;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_319_p2 == 1'd1))) begin
        tmp_2_reg_583 <= tmp_2_fu_325_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        tmp_6_reg_673 <= tmp_6_fu_564_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) & (tmp_4_fu_541_p3 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        if ((tmp_2_reg_583 == 4'd12)) begin
            ap_phi_mux_UnifiedRetVal_i1_phi_fu_152_p12 = shift_reg_9;
        end else if ((tmp_2_reg_583 == 4'd10)) begin
            ap_phi_mux_UnifiedRetVal_i1_phi_fu_152_p12 = shift_reg_7;
        end else if ((tmp_2_reg_583 == 4'd8)) begin
            ap_phi_mux_UnifiedRetVal_i1_phi_fu_152_p12 = shift_reg_5;
        end else if ((tmp_2_reg_583 == 4'd6)) begin
            ap_phi_mux_UnifiedRetVal_i1_phi_fu_152_p12 = shift_reg_3;
        end else if ((tmp_2_reg_583 == 4'd4)) begin
            ap_phi_mux_UnifiedRetVal_i1_phi_fu_152_p12 = shift_reg_1;
        end else begin
            ap_phi_mux_UnifiedRetVal_i1_phi_fu_152_p12 = UnifiedRetVal_i1_reg_149;
        end
    end else begin
        ap_phi_mux_UnifiedRetVal_i1_phi_fu_152_p12 = UnifiedRetVal_i1_reg_149;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        if ((1'b1 == ap_condition_216)) begin
            ap_phi_mux_UnifiedRetVal_i_phi_fu_135_p12 = shift_reg_10;
        end else if ((tmp_2_reg_583 == 4'd10)) begin
            ap_phi_mux_UnifiedRetVal_i_phi_fu_135_p12 = shift_reg_8;
        end else if ((tmp_2_reg_583 == 4'd8)) begin
            ap_phi_mux_UnifiedRetVal_i_phi_fu_135_p12 = shift_reg_6;
        end else if ((tmp_2_reg_583 == 4'd6)) begin
            ap_phi_mux_UnifiedRetVal_i_phi_fu_135_p12 = shift_reg_4;
        end else if ((tmp_2_reg_583 == 4'd4)) begin
            ap_phi_mux_UnifiedRetVal_i_phi_fu_135_p12 = shift_reg_2;
        end else begin
            ap_phi_mux_UnifiedRetVal_i_phi_fu_135_p12 = UnifiedRetVal_i_reg_132;
        end
    end else begin
        ap_phi_mux_UnifiedRetVal_i_phi_fu_135_p12 = UnifiedRetVal_i_reg_132;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) & (tmp_4_fu_541_p3 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        c_ce0 = 1'b1;
    end else begin
        c_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) & (tmp_4_fu_541_p3 == 1'd1))) begin
        y_ap_vld = 1'b1;
    end else begin
        y_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (tmp_1_fu_393_p2 == 1'd1) & (tmp_fu_319_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (tmp_s_fu_435_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (tmp_3_fu_485_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (tmp_4_fu_541_p3 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign acc_1_fu_569_p2 = (tmp_6_reg_673 + acc_reg_183);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_condition_216 = (~(tmp_2_reg_583 == 4'd4) & ~(tmp_2_reg_583 == 4'd10) & ~(tmp_2_reg_583 == 4'd6) & ~(tmp_2_reg_583 == 4'd8) & ~(tmp_2_reg_583 == 4'd2));
end

always @ (*) begin
    ap_condition_478 = (~(tmp_7_fu_554_p1 == 4'd0) & ~(tmp_7_fu_554_p1 == 4'd9) & ~(tmp_7_fu_554_p1 == 4'd8) & ~(tmp_7_fu_554_p1 == 4'd7) & ~(tmp_7_fu_554_p1 == 4'd6) & ~(tmp_7_fu_554_p1 == 4'd5) & ~(tmp_7_fu_554_p1 == 4'd4) & ~(tmp_7_fu_554_p1 == 4'd3) & ~(tmp_7_fu_554_p1 == 4'd2) & ~(tmp_7_fu_554_p1 == 4'd1));
end

always @ (*) begin
    ap_condition_98 = (~(tmp_2_reg_583 == 4'd4) & ~(tmp_2_reg_583 == 4'd10) & ~(tmp_2_reg_583 == 4'd6) & ~(tmp_2_reg_583 == 4'd12) & ~(tmp_2_reg_583 == 4'd8));
end

assign c_address0 = tmp_5_fu_549_p1;

assign i_1_cast_fu_537_p1 = i_1_reg_196;

assign i_2_1_fu_399_p2 = ($signed(i_reg_120) + $signed(5'd30));

assign i_2_2_cast_fu_440_p2 = ($signed(tmp_2_reg_583) + $signed(4'd13));

assign i_2_3_fu_490_p2 = ($signed(i_reg_120) + $signed(5'd28));

assign i_2_fu_329_p2 = ($signed(5'd31) + $signed(i_reg_120));

assign i_3_fu_558_p2 = ($signed(i_1_reg_196) + $signed(5'd31));

assign sel_tmp1_fu_341_p3 = ((sel_tmp_fu_335_p2[0:0] === 1'b1) ? shift_reg_1 : shift_reg_9);

assign sel_tmp4_fu_349_p2 = ((tmp_2_fu_325_p1 == 4'd6) ? 1'b1 : 1'b0);

assign sel_tmp5_fu_355_p3 = ((sel_tmp4_fu_349_p2[0:0] === 1'b1) ? shift_reg_5 : sel_tmp1_fu_341_p3);

assign sel_tmp_fu_335_p2 = ((tmp_2_fu_325_p1 == 4'd2) ? 1'b1 : 1'b0);

assign tmp_1_fu_393_p2 = (($signed(i_2_fu_329_p2) > $signed(5'd0)) ? 1'b1 : 1'b0);

assign tmp_2_fu_325_p1 = i_reg_120[3:0];

assign tmp_3_fu_485_p2 = (($signed(i_2_2_cast_reg_604) > $signed(4'd0)) ? 1'b1 : 1'b0);

assign tmp_4_fu_541_p3 = i_1_reg_196[32'd4];

assign tmp_5_fu_549_p1 = $unsigned(i_1_cast_fu_537_p1);

assign tmp_6_fu_564_p2 = ($signed(c_load_reg_668) * $signed(UnifiedRetVal_i3_reg_207));

assign tmp_7_fu_554_p1 = i_1_reg_196[3:0];

assign tmp_fu_319_p2 = (($signed(i_reg_120) > $signed(5'd0)) ? 1'b1 : 1'b0);

assign tmp_s_fu_435_p2 = (($signed(i_2_1_reg_591) > $signed(5'd0)) ? 1'b1 : 1'b0);

assign y = acc_reg_183;

endmodule //fir
