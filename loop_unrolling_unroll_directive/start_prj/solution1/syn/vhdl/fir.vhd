-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fir is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    y : OUT STD_LOGIC_VECTOR (31 downto 0);
    y_ap_vld : OUT STD_LOGIC;
    c_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    c_ce0 : OUT STD_LOGIC;
    c_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    c_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    c_ce1 : OUT STD_LOGIC;
    c_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    x : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of fir is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "fir,hls_ip_2018_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xa7a12tcsg325-1q,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.470000,HLS_SYN_LAT=10,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=33,HLS_SYN_FF=971,HLS_SYN_LUT=698,HLS_VERSION=2018_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv64_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001001";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal shift_reg_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal reg_179 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal reg_184 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal reg_188 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_6_fu_206_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_reg_427 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_1_fu_212_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_1_reg_432 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_2_fu_248_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_2_reg_447 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_3_fu_254_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_3_reg_452 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_4_fu_260_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_4_reg_457 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_fu_266_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_reg_472 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_load_8_reg_477 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp2_fu_274_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp2_reg_492 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_5_fu_309_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_5_reg_497 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_6_fu_315_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_6_reg_502 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_7_fu_321_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_7_reg_507 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_8_fu_353_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_8_reg_512 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_6_9_fu_358_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_9_reg_517 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_s_fu_364_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_s_reg_522 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp6_fu_370_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp6_reg_527 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp7_fu_378_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp7_reg_532 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp4_fu_387_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp4_reg_537 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal tmp_6_fu_206_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_1_fu_212_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_2_fu_248_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_3_fu_254_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_4_fu_260_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp3_fu_270_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_5_fu_309_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_6_fu_315_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_7_fu_321_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_8_fu_353_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_9_fu_358_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_s_fu_364_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp8_fu_374_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp5_fu_383_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_392_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    reg_179_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                reg_179 <= c_q1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                reg_179 <= c_q0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                c_load_8_reg_477 <= c_q0;
                tmp2_reg_492 <= tmp2_fu_274_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then
                reg_184 <= c_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state3))) then
                reg_188 <= c_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                shift_reg_0 <= x;
                shift_reg_1 <= shift_reg_0;
                shift_reg_2 <= shift_reg_1;
                tmp6_reg_527 <= tmp6_fu_370_p2;
                tmp_6_8_reg_512 <= tmp_6_8_fu_353_p2;
                tmp_6_9_reg_517 <= tmp_6_9_fu_358_p2;
                tmp_6_s_reg_522 <= tmp_6_s_fu_364_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                shift_reg_3 <= shift_reg_2;
                shift_reg_4 <= shift_reg_3;
                shift_reg_5 <= shift_reg_4;
                tmp_6_5_reg_497 <= tmp_6_5_fu_309_p2;
                tmp_6_6_reg_502 <= tmp_6_6_fu_315_p2;
                tmp_6_7_reg_507 <= tmp_6_7_fu_321_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                shift_reg_6 <= shift_reg_5;
                shift_reg_7 <= shift_reg_6;
                shift_reg_8 <= shift_reg_7;
                tmp1_reg_472 <= tmp1_fu_266_p2;
                tmp_6_2_reg_447 <= tmp_6_2_fu_248_p2;
                tmp_6_3_reg_452 <= tmp_6_3_fu_254_p2;
                tmp_6_4_reg_457 <= tmp_6_4_fu_260_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                shift_reg_9 <= shift_reg_8;
                tmp_6_1_reg_432 <= tmp_6_1_fu_212_p2;
                tmp_6_reg_427 <= tmp_6_fu_206_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                tmp4_reg_537 <= tmp4_fu_387_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                tmp7_reg_532 <= tmp7_fu_378_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    c_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state3, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            c_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            c_address0 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            c_address0 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            c_address0 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            c_address0 <= ap_const_lv64_9(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            c_address0 <= ap_const_lv64_A(4 - 1 downto 0);
        else 
            c_address0 <= "XXXX";
        end if; 
    end process;


    c_address1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state3, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            c_address1 <= ap_const_lv64_1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            c_address1 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            c_address1 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            c_address1 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            c_address1 <= ap_const_lv64_8(4 - 1 downto 0);
        else 
            c_address1 <= "XXXX";
        end if; 
    end process;


    c_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state3, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            c_ce0 <= ap_const_logic_1;
        else 
            c_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    c_ce1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state3, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            c_ce1 <= ap_const_logic_1;
        else 
            c_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp1_fu_266_p2 <= std_logic_vector(unsigned(tmp_6_reg_427) + unsigned(tmp_6_1_reg_432));
    tmp2_fu_274_p2 <= std_logic_vector(unsigned(tmp3_fu_270_p2) + unsigned(tmp_6_2_reg_447));
    tmp3_fu_270_p2 <= std_logic_vector(unsigned(tmp_6_3_reg_452) + unsigned(tmp_6_4_reg_457));
    tmp4_fu_387_p2 <= std_logic_vector(unsigned(tmp7_reg_532) + unsigned(tmp5_fu_383_p2));
    tmp5_fu_383_p2 <= std_logic_vector(unsigned(tmp6_reg_527) + unsigned(tmp_6_5_reg_497));
    tmp6_fu_370_p2 <= std_logic_vector(unsigned(tmp_6_6_reg_502) + unsigned(tmp_6_7_reg_507));
    tmp7_fu_378_p2 <= std_logic_vector(unsigned(tmp8_fu_374_p2) + unsigned(tmp_6_8_reg_512));
    tmp8_fu_374_p2 <= std_logic_vector(unsigned(tmp_6_9_reg_517) + unsigned(tmp_6_s_reg_522));
    tmp_6_1_fu_212_p0 <= shift_reg_8;
    tmp_6_1_fu_212_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_6_1_fu_212_p0) * signed(reg_184))), 32));
    tmp_6_2_fu_248_p0 <= shift_reg_7;
    tmp_6_2_fu_248_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_6_2_fu_248_p0) * signed(reg_188))), 32));
    tmp_6_3_fu_254_p0 <= shift_reg_6;
    tmp_6_3_fu_254_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_6_3_fu_254_p0) * signed(reg_179))), 32));
    tmp_6_4_fu_260_p0 <= shift_reg_5;
    tmp_6_4_fu_260_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_6_4_fu_260_p0) * signed(reg_184))), 32));
    tmp_6_5_fu_309_p0 <= shift_reg_4;
    tmp_6_5_fu_309_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_6_5_fu_309_p0) * signed(reg_179))), 32));
    tmp_6_6_fu_315_p0 <= shift_reg_3;
    tmp_6_6_fu_315_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_6_6_fu_315_p0) * signed(reg_184))), 32));
    tmp_6_7_fu_321_p0 <= shift_reg_2;
    tmp_6_7_fu_321_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_6_7_fu_321_p0) * signed(reg_188))), 32));
    tmp_6_8_fu_353_p0 <= shift_reg_1;
    tmp_6_8_fu_353_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_6_8_fu_353_p0) * signed(c_load_8_reg_477))), 32));
    tmp_6_9_fu_358_p0 <= shift_reg_0;
    tmp_6_9_fu_358_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_6_9_fu_358_p0) * signed(reg_179))), 32));
    tmp_6_fu_206_p0 <= shift_reg_9;
    tmp_6_fu_206_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_6_fu_206_p0) * signed(reg_179))), 32));
    tmp_6_s_fu_364_p1 <= x;
    tmp_6_s_fu_364_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(reg_184) * signed(tmp_6_s_fu_364_p1))), 32));
    tmp_fu_392_p2 <= std_logic_vector(unsigned(tmp2_reg_492) + unsigned(tmp1_reg_472));
    y <= std_logic_vector(unsigned(tmp4_reg_537) + unsigned(tmp_fu_392_p2));

    y_ap_vld_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            y_ap_vld <= ap_const_logic_1;
        else 
            y_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

end behav;
