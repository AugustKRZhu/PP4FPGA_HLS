// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fir,hls_ip_2018_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xa7a12tcsg325-1q,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.470000,HLS_SYN_LAT=10,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=33,HLS_SYN_FF=971,HLS_SYN_LUT=698,HLS_VERSION=2018_2}" *)

module fir (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        y,
        y_ap_vld,
        c_address0,
        c_ce0,
        c_q0,
        c_address1,
        c_ce1,
        c_q1,
        x
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_state8 = 11'd128;
parameter    ap_ST_fsm_state9 = 11'd256;
parameter    ap_ST_fsm_state10 = 11'd512;
parameter    ap_ST_fsm_state11 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [31:0] y;
output   y_ap_vld;
output  [3:0] c_address0;
output   c_ce0;
input  [31:0] c_q0;
output  [3:0] c_address1;
output   c_ce1;
input  [31:0] c_q1;
input  [31:0] x;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg y_ap_vld;
reg[3:0] c_address0;
reg c_ce0;
reg[3:0] c_address1;
reg c_ce1;

(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] shift_reg_9;
reg   [31:0] shift_reg_8;
reg   [31:0] shift_reg_7;
reg   [31:0] shift_reg_6;
reg   [31:0] shift_reg_5;
reg   [31:0] shift_reg_4;
reg   [31:0] shift_reg_3;
reg   [31:0] shift_reg_2;
reg   [31:0] shift_reg_1;
reg   [31:0] shift_reg_0;
reg  signed [31:0] reg_179;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state7;
reg  signed [31:0] reg_184;
wire    ap_CS_fsm_state3;
reg  signed [31:0] reg_188;
wire    ap_CS_fsm_state6;
wire   [31:0] tmp_6_fu_206_p2;
reg   [31:0] tmp_6_reg_427;
wire   [31:0] tmp_6_1_fu_212_p2;
reg   [31:0] tmp_6_1_reg_432;
wire   [31:0] tmp_6_2_fu_248_p2;
reg   [31:0] tmp_6_2_reg_447;
wire   [31:0] tmp_6_3_fu_254_p2;
reg   [31:0] tmp_6_3_reg_452;
wire   [31:0] tmp_6_4_fu_260_p2;
reg   [31:0] tmp_6_4_reg_457;
wire   [31:0] tmp1_fu_266_p2;
reg   [31:0] tmp1_reg_472;
reg  signed [31:0] c_load_8_reg_477;
wire   [31:0] tmp2_fu_274_p2;
reg   [31:0] tmp2_reg_492;
wire   [31:0] tmp_6_5_fu_309_p2;
reg   [31:0] tmp_6_5_reg_497;
wire   [31:0] tmp_6_6_fu_315_p2;
reg   [31:0] tmp_6_6_reg_502;
wire   [31:0] tmp_6_7_fu_321_p2;
reg   [31:0] tmp_6_7_reg_507;
wire   [31:0] tmp_6_8_fu_353_p2;
reg   [31:0] tmp_6_8_reg_512;
wire    ap_CS_fsm_state8;
wire   [31:0] tmp_6_9_fu_358_p2;
reg   [31:0] tmp_6_9_reg_517;
wire   [31:0] tmp_6_s_fu_364_p2;
reg   [31:0] tmp_6_s_reg_522;
wire   [31:0] tmp6_fu_370_p2;
reg   [31:0] tmp6_reg_527;
wire   [31:0] tmp7_fu_378_p2;
reg   [31:0] tmp7_reg_532;
wire    ap_CS_fsm_state9;
wire   [31:0] tmp4_fu_387_p2;
reg   [31:0] tmp4_reg_537;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
wire  signed [31:0] tmp_6_fu_206_p0;
wire  signed [31:0] tmp_6_1_fu_212_p0;
wire  signed [31:0] tmp_6_2_fu_248_p0;
wire  signed [31:0] tmp_6_3_fu_254_p0;
wire  signed [31:0] tmp_6_4_fu_260_p0;
wire   [31:0] tmp3_fu_270_p2;
wire  signed [31:0] tmp_6_5_fu_309_p0;
wire  signed [31:0] tmp_6_6_fu_315_p0;
wire  signed [31:0] tmp_6_7_fu_321_p0;
wire  signed [31:0] tmp_6_8_fu_353_p0;
wire  signed [31:0] tmp_6_9_fu_358_p0;
wire  signed [31:0] tmp_6_s_fu_364_p1;
wire   [31:0] tmp8_fu_374_p2;
wire   [31:0] tmp5_fu_383_p2;
wire   [31:0] tmp_fu_392_p2;
reg   [10:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
#0 shift_reg_9 = 32'd0;
#0 shift_reg_8 = 32'd0;
#0 shift_reg_7 = 32'd0;
#0 shift_reg_6 = 32'd0;
#0 shift_reg_5 = 32'd0;
#0 shift_reg_4 = 32'd0;
#0 shift_reg_3 = 32'd0;
#0 shift_reg_2 = 32'd0;
#0 shift_reg_1 = 32'd0;
#0 shift_reg_0 = 32'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        reg_179 <= c_q1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        reg_179 <= c_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        c_load_8_reg_477 <= c_q0;
        tmp2_reg_492 <= tmp2_fu_274_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        reg_184 <= c_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state3))) begin
        reg_188 <= c_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        shift_reg_0 <= x;
        shift_reg_1 <= shift_reg_0;
        shift_reg_2 <= shift_reg_1;
        tmp6_reg_527 <= tmp6_fu_370_p2;
        tmp_6_8_reg_512 <= tmp_6_8_fu_353_p2;
        tmp_6_9_reg_517 <= tmp_6_9_fu_358_p2;
        tmp_6_s_reg_522 <= tmp_6_s_fu_364_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        shift_reg_3 <= shift_reg_2;
        shift_reg_4 <= shift_reg_3;
        shift_reg_5 <= shift_reg_4;
        tmp_6_5_reg_497 <= tmp_6_5_fu_309_p2;
        tmp_6_6_reg_502 <= tmp_6_6_fu_315_p2;
        tmp_6_7_reg_507 <= tmp_6_7_fu_321_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        shift_reg_6 <= shift_reg_5;
        shift_reg_7 <= shift_reg_6;
        shift_reg_8 <= shift_reg_7;
        tmp1_reg_472 <= tmp1_fu_266_p2;
        tmp_6_2_reg_447 <= tmp_6_2_fu_248_p2;
        tmp_6_3_reg_452 <= tmp_6_3_fu_254_p2;
        tmp_6_4_reg_457 <= tmp_6_4_fu_260_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        shift_reg_9 <= shift_reg_8;
        tmp_6_1_reg_432 <= tmp_6_1_fu_212_p2;
        tmp_6_reg_427 <= tmp_6_fu_206_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        tmp4_reg_537 <= tmp4_fu_387_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        tmp7_reg_532 <= tmp7_fu_378_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        c_address0 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        c_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        c_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        c_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        c_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        c_address0 = 64'd10;
    end else begin
        c_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        c_address1 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        c_address1 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        c_address1 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        c_address1 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        c_address1 = 64'd8;
    end else begin
        c_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        c_ce0 = 1'b1;
    end else begin
        c_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2))) begin
        c_ce1 = 1'b1;
    end else begin
        c_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        y_ap_vld = 1'b1;
    end else begin
        y_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign tmp1_fu_266_p2 = (tmp_6_reg_427 + tmp_6_1_reg_432);

assign tmp2_fu_274_p2 = (tmp3_fu_270_p2 + tmp_6_2_reg_447);

assign tmp3_fu_270_p2 = (tmp_6_3_reg_452 + tmp_6_4_reg_457);

assign tmp4_fu_387_p2 = (tmp7_reg_532 + tmp5_fu_383_p2);

assign tmp5_fu_383_p2 = (tmp6_reg_527 + tmp_6_5_reg_497);

assign tmp6_fu_370_p2 = (tmp_6_6_reg_502 + tmp_6_7_reg_507);

assign tmp7_fu_378_p2 = (tmp8_fu_374_p2 + tmp_6_8_reg_512);

assign tmp8_fu_374_p2 = (tmp_6_9_reg_517 + tmp_6_s_reg_522);

assign tmp_6_1_fu_212_p0 = shift_reg_8;

assign tmp_6_1_fu_212_p2 = ($signed(tmp_6_1_fu_212_p0) * $signed(reg_184));

assign tmp_6_2_fu_248_p0 = shift_reg_7;

assign tmp_6_2_fu_248_p2 = ($signed(tmp_6_2_fu_248_p0) * $signed(reg_188));

assign tmp_6_3_fu_254_p0 = shift_reg_6;

assign tmp_6_3_fu_254_p2 = ($signed(tmp_6_3_fu_254_p0) * $signed(reg_179));

assign tmp_6_4_fu_260_p0 = shift_reg_5;

assign tmp_6_4_fu_260_p2 = ($signed(tmp_6_4_fu_260_p0) * $signed(reg_184));

assign tmp_6_5_fu_309_p0 = shift_reg_4;

assign tmp_6_5_fu_309_p2 = ($signed(tmp_6_5_fu_309_p0) * $signed(reg_179));

assign tmp_6_6_fu_315_p0 = shift_reg_3;

assign tmp_6_6_fu_315_p2 = ($signed(tmp_6_6_fu_315_p0) * $signed(reg_184));

assign tmp_6_7_fu_321_p0 = shift_reg_2;

assign tmp_6_7_fu_321_p2 = ($signed(tmp_6_7_fu_321_p0) * $signed(reg_188));

assign tmp_6_8_fu_353_p0 = shift_reg_1;

assign tmp_6_8_fu_353_p2 = ($signed(tmp_6_8_fu_353_p0) * $signed(c_load_8_reg_477));

assign tmp_6_9_fu_358_p0 = shift_reg_0;

assign tmp_6_9_fu_358_p2 = ($signed(tmp_6_9_fu_358_p0) * $signed(reg_179));

assign tmp_6_fu_206_p0 = shift_reg_9;

assign tmp_6_fu_206_p2 = ($signed(tmp_6_fu_206_p0) * $signed(reg_179));

assign tmp_6_s_fu_364_p1 = x;

assign tmp_6_s_fu_364_p2 = ($signed(reg_184) * $signed(tmp_6_s_fu_364_p1));

assign tmp_fu_392_p2 = (tmp2_reg_492 + tmp1_reg_472);

assign y = (tmp4_reg_537 + tmp_fu_392_p2);

endmodule //fir
