// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fir,hls_ip_2018_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xa7a12tcsg325-1q,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.470000,HLS_SYN_LAT=56,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=3,HLS_SYN_FF=163,HLS_SYN_LUT=287,HLS_VERSION=2018_2}" *)

module fir (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        y,
        y_ap_vld,
        c_address0,
        c_ce0,
        c_q0,
        x
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_state6 = 9'd32;
parameter    ap_ST_fsm_state7 = 9'd64;
parameter    ap_ST_fsm_state8 = 9'd128;
parameter    ap_ST_fsm_state9 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [31:0] y;
output   y_ap_vld;
output  [3:0] c_address0;
output   c_ce0;
input  [31:0] c_q0;
input  [31:0] x;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg y_ap_vld;
reg c_ce0;

(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [3:0] shift_reg_address0;
reg    shift_reg_ce0;
reg    shift_reg_we0;
reg   [31:0] shift_reg_d0;
wire   [31:0] shift_reg_q0;
reg   [3:0] shift_reg_address1;
reg    shift_reg_ce1;
reg    shift_reg_we1;
reg   [31:0] shift_reg_d1;
wire   [31:0] shift_reg_q1;
reg   [31:0] reg_171;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state7;
reg   [3:0] shift_reg_addr_reg_262;
wire    ap_CS_fsm_state2;
wire   [0:0] tmp_fu_176_p2;
reg   [3:0] shift_reg_addr_2_reg_268;
wire   [3:0] tmp_6_fu_209_p2;
reg   [3:0] tmp_6_reg_274;
wire    ap_CS_fsm_state6;
wire   [0:0] tmp_8_fu_224_p3;
wire   [4:0] i_2_fu_238_p2;
reg   [4:0] i_2_reg_297;
reg  signed [31:0] c_load_reg_302;
wire   [31:0] tmp_s_fu_244_p2;
reg   [31:0] tmp_s_reg_307;
wire    ap_CS_fsm_state8;
wire   [31:0] acc_1_fu_249_p2;
wire    ap_CS_fsm_state9;
reg   [3:0] i_reg_135;
wire    ap_CS_fsm_state4;
reg   [31:0] acc_reg_147;
wire    ap_CS_fsm_state5;
reg  signed [4:0] i_1_reg_160;
wire   [63:0] tmp_2_fu_188_p1;
wire   [63:0] tmp_5_fu_199_p1;
wire   [63:0] tmp_3_fu_204_p1;
wire   [63:0] tmp_7_fu_215_p1;
wire   [63:0] tmp_9_fu_232_p1;
wire   [3:0] tmp_1_fu_182_p2;
wire   [3:0] tmp_4_fu_193_p2;
wire  signed [31:0] i_1_cast_fu_220_p1;
wire  signed [31:0] tmp_s_fu_244_p0;
reg   [8:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
end

fir_shift_reg #(
    .DataWidth( 32 ),
    .AddressRange( 11 ),
    .AddressWidth( 4 ))
shift_reg_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(shift_reg_address0),
    .ce0(shift_reg_ce0),
    .we0(shift_reg_we0),
    .d0(shift_reg_d0),
    .q0(shift_reg_q0),
    .address1(shift_reg_address1),
    .ce1(shift_reg_ce1),
    .we1(shift_reg_we1),
    .d1(shift_reg_d1),
    .q1(shift_reg_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        acc_reg_147 <= acc_1_fu_249_p2;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        acc_reg_147 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        i_1_reg_160 <= i_2_reg_297;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        i_1_reg_160 <= 5'd10;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_reg_135 <= tmp_6_reg_274;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_135 <= 4'd10;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        c_load_reg_302 <= c_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_8_fu_224_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        i_2_reg_297 <= i_2_fu_238_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state3))) begin
        reg_171 <= shift_reg_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_176_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        shift_reg_addr_2_reg_268 <= tmp_5_fu_199_p1;
        shift_reg_addr_reg_262 <= tmp_2_fu_188_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tmp_6_reg_274 <= tmp_6_fu_209_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        tmp_s_reg_307 <= tmp_s_fu_244_p2;
    end
end

always @ (*) begin
    if (((tmp_8_fu_224_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_8_fu_224_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        c_ce0 = 1'b1;
    end else begin
        c_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        shift_reg_address0 = shift_reg_addr_2_reg_268;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        shift_reg_address0 = tmp_7_fu_215_p1;
    end else if (((1'b1 == ap_CS_fsm_state5) | ((tmp_fu_176_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        shift_reg_address0 = 4'd0;
    end else if (((tmp_fu_176_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        shift_reg_address0 = tmp_2_fu_188_p1;
    end else begin
        shift_reg_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        shift_reg_address1 = tmp_9_fu_232_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        shift_reg_address1 = 4'd1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        shift_reg_address1 = shift_reg_addr_reg_262;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        shift_reg_address1 = tmp_3_fu_204_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        shift_reg_address1 = tmp_5_fu_199_p1;
    end else begin
        shift_reg_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | ((tmp_fu_176_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((tmp_fu_176_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        shift_reg_ce0 = 1'b1;
    end else begin
        shift_reg_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        shift_reg_ce1 = 1'b1;
    end else begin
        shift_reg_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        shift_reg_d0 = x;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        shift_reg_d0 = shift_reg_q0;
    end else begin
        shift_reg_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        shift_reg_d1 = reg_171;
    end else if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state5))) begin
        shift_reg_d1 = shift_reg_q0;
    end else begin
        shift_reg_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        shift_reg_we0 = 1'b1;
    end else begin
        shift_reg_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        shift_reg_we1 = 1'b1;
    end else begin
        shift_reg_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_8_fu_224_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        y_ap_vld = 1'b1;
    end else begin
        y_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_fu_176_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((tmp_8_fu_224_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign acc_1_fu_249_p2 = (tmp_s_reg_307 + acc_reg_147);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign c_address0 = tmp_9_fu_232_p1;

assign i_1_cast_fu_220_p1 = i_1_reg_160;

assign i_2_fu_238_p2 = ($signed(i_1_reg_160) + $signed(5'd31));

assign tmp_1_fu_182_p2 = ($signed(i_reg_135) + $signed(4'd15));

assign tmp_2_fu_188_p1 = tmp_1_fu_182_p2;

assign tmp_3_fu_204_p1 = i_reg_135;

assign tmp_4_fu_193_p2 = ($signed(i_reg_135) + $signed(4'd14));

assign tmp_5_fu_199_p1 = tmp_4_fu_193_p2;

assign tmp_6_fu_209_p2 = ($signed(i_reg_135) + $signed(4'd13));

assign tmp_7_fu_215_p1 = tmp_6_fu_209_p2;

assign tmp_8_fu_224_p3 = i_1_reg_160[32'd4];

assign tmp_9_fu_232_p1 = $unsigned(i_1_cast_fu_220_p1);

assign tmp_fu_176_p2 = ((i_reg_135 > 4'd2) ? 1'b1 : 1'b0);

assign tmp_s_fu_244_p0 = reg_171;

assign tmp_s_fu_244_p2 = ($signed(tmp_s_fu_244_p0) * $signed(c_load_reg_302));

assign y = acc_reg_147;

endmodule //fir
