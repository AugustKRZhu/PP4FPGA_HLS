FPGA design process
I/O interface core - structural RTL timing constraints
standard cores
accelerator cores - constructe for a specific application by a system designer. custom cores designed using HLS.

Integrating design - two design methodologies
1. HLS generated accelerator core is like any other core, they are combined with I/O interface cores and standard cores to form a design.
this is called core based design methodology

Platform based design methologies- integrate different algorithms (roles) within interfaces provided by a singple platform or shell. Standard design templates called platforms are available.

Design optimization
performance characterization
1. computation time
2. seconds (to account for different clock domains)
3. Task -atomic unit of behavior, task latency - time between tast start and finish. Task interval - time between one task start and next starts
4. data rate - depends on task interval and size of araguments to function

Area throughput tradeoffs

HLS optimizations
1. loop unrolling
2. loop pipelining
3. bitwidth optimization
4. function inlining
5. hierarchy
6. array optimizations
7. task pipelining
8. test bench
9. co simulation
10. streaming
11. interfacing

Next step - FIR fulters using HLS - read from page 31 to 34

Getting started with vivaod High level synthsis
https://www.xilinx.com/video/hardware/getting-started-vivado-high-level-synthesis.html
Complete list of documentation on vivaod hls
https://www.xilinx.com/support/documentation-navigation/design-hubs/dh0012-vivado-high-level-synthesis-hub.html


FIR example
git clone https://github.com/Xilinx/HLx_Examples.git
Documenttion on how to run the FIR example - https://github.com/Xilinx/HLx_Examples/tree/master/DSP/fir_example
work: /home/ramdas/Work/Learning/CPP_Learning/HLx_Examples/DSP/fir_example
cd /home/ramdas/Work/Learning/CPP_Learning/HLx_Examples/DSP/fir_example
cp fir.cpp fir.h ./fir_test.cpp /home/ramdas/Work/Learning/CPP_Learning/PP4FPGA_HLS/getting_started_vivado_hls/
cp ./run_1_FIR_script.tcl /home/ramdas/Work/Learning/CPP_Learning/PP4FPGA_HLS/getting_started_vivado_hls/
cp -prf ./data/ /home/ramdas/Work/Learning/CPP_Learning/PP4FPGA_HLS/getting_started_vivado_hls/

created new project using
vivado_hls

Validate C design - simulate the C code 
Run into error probably because no control on code
Gettint the right design files
Copied design files to /home/ramdas/Work/Learning/CPP_Learning/PP4FPGA_HLS/ug871-design-files
cleaning up getting started project
copying fir examples to here ~/Work/Learning/CPP_Learning/PP4FPGA_HLS/getting_started_vivado_hls
cp ../ug871-design-files/Introduction/lab1/* .
restarting vivado hls
Created new project and added fir.c and fir.h files
added test benches
ran the c simulation and it works

Next step is to go through the C code and understand how it works
Also for beginner I should read the vivado design suite tutorial - high level synthesis
This book has good tutorials and how to get used to the interface then I can learn how to do different optimizations
Git pushed

Now working on my own version of FIR
work dir: /home/ramdas/Work/Learning/CPP_Learning/PP4FPGA_HLS/getting_started_vivado_hls/my_ver
main should be test bench the other hardware must be functions



Using TCL interface of Vivado HLS
work: ~/Work/Learning/CPP_Learning/PP4FPGA_HLS/getting_started_vivado_hls/lab2
TCL : run_hls.tcl
Run : vivado_hls -f run_hls.tcl
Results:
Synthesis report: project/solution/syn/report
Simulation report: project/solution/sim/report
output package: project/solution/impl/ip
output RTL: project/solution/impl/verilog (vhdl)

Vary clock period for base FIR from 10ns to 1ns in increments of 1ns which clock period provides best performance
which gives best area
looking at synthesis report
Next Step: Understanding the synthesis report - https://forums.xilinx.com/t5/Vivado-High-Level-Synthesis-HLS/HLS-Synthesis-Report-Explanation-on-Performance-Estimates-and/td-p/781394


Code hoisting
in FIR code the if statement resolves only in last iteration and it has to be taken out of the loop
Work: ~/Work/Learning/CPP_Learning/PP4FPGA_HLS/code_hoisting
cp ../getting_started_vivado_hls/lab2/* .
Comparing with previous design
Edited fir.c to hoist out code comments in file
vivado_hls -f ./run_hls.tcl
Report: less ./start_prj/solution1/syn/report/fir_csynth.rpt
Estimated time is 8.470 ns
Latency 44
Compare with less ../getting_started_vivado_hls/lab2/start_prj/solution1/syn/report/fir_csynth.rpt
Estimated time is 8.470
Latency 56 clock cycles
This design works better

Loop fission
* Two fundamental operations within forloop 
* shifts data through shift_reg array
* multiply accumulate ops to calc output sample
* loop fission takes these two operations and implements each of them in their own loop. 
* it allows us to perform optimizations seprately on each loop. 
* usage of loop fission depends on application, some applications loop merging may offer better results
Identify operations that happen in a loop and split them into separate loops to optimize them individually
/home/ramdas/Work/Learning/CPP_Learning/PP4FPGA_HLS/loop_fission
Latency is 66 which is worse than what we began with 
From resource utilization point of view - Number of FFs increase and Number of LUTs decrease
There are two loops in report now

Loop Unrolling
/home/ramdas/Work/Learning/CPP_Learning/PP4FPGA_HLS/loop_unrolling
* HLS synthesizes for loops in sequential manner
* tool creates datapath that implements one execution of statements in the body of the loop
* the data path executes sequentially for each iteration of the loop. 
* creates area efficient architecture but limits the ability to exploit parallelism. 
*  loop unrolling replicates body of loop some number of times (factor) and reduces number of iterations of the loop by same factor.
Run : vivado_hls -f run_hls.tcl
Result: less ./start_prj/solution1/syn/report/fir_csynth.rpt
The latency has decreased from 66 to 56
Resrouce utilization: 2,3,163,287 (BRAM, DSP, FF, LUT)
This has increased from reference: loop fission 0,3,217,213

Pragmas
to be able to read and write multiple values at same time from shift_reg, each value must be stored in separate register
This can be specified using pragmas
#pragma HLS array_partition variable = shift_reg complete

Automatic loop unrolling
using unroll directive
#pragma HLS unroll factor=2 in the body of the code.
work: /home/ramdas/Work/Learning/CPP_Learning/PP4FPGA_HLS/loop_unrolling_unroll_directive
Latency 56
Resource 2,3,153,250
adding array partition pragma
Next step: Conitnue loop unrolling part in the book
Removed unroll checking having array_partition directive
Latency of TDL is 30 cycles
Added unroll factor of 4
Latency of TDL is 15, max 17 it is seen
Adding loop unrolling for MAC operations
Before adding loop unrolling latency 44,44
After adding unroll factor 4, latency 39 to 48?
Doing a complete unroll Latency dropped to 10 from 66
the loops have disappeared
Resource utilization: 0,33,971,698
Significant reduction in latency and increase in resources.

Loop Pipelining
In other cases, it is possible to start some of the statements in a later iteration before all of the statements in a former iteration are complete. This does not happen unless the designer specifically states that it should. This motivates the idea of loop pipelining, which allows for multiple iterations of the loop to execute concurrently.
iteration latency - number of cycles it takes to perform one iteration of the loop body
for loop latency - number of cycles required to complete the for loop.
Latency can be thought to be the maximum number of registers between input data and output data.
The loop initiation interval (II) is another important performance metric. It is the number of cycles until the next iteration of the loop can start.
pragma to set the number of pipelines
#pragma HLS pipeline II=1
pipelines set to 1
pipline_II, Latency, Iteration latency, initiation interval, pipelined
1, 13, 4, 1, yes
2, 23, 4, 2, yes

#pragma HLS pipeline without II will allow HLS to be flexible on the schedule

Bitwidth optimization
Create a simple design that implements the code a = b ∗ c. Change the data type of the
variables to char, short, int, long, and long long. How many cycles does the multiply operation take in each case? How many resources are used for the different data types?
wrote multiple_bw.c
vivado_hls -f ./run_hls.tcl 
int latency = 0
long latency = 4
long long latency = 4

the resource utilization increases dramatically. 3 DSP for INT to 16 for long long
arbitrary precision data types
unsigned: ap_uint<width>
signed: ap_int<width>
width is between 1 and 1024
#include ”ap int.h” in filename ending in cpp
coef_t is 10 bits (9bits + 1 sign bit)
shift_reg has same type as x
addition operation
ap_uint<z> = ap_unit<x> + ap_uint<y>
z = max(x,y) + 1
Multiplication operation
z = x+y
Accumulate operation
Multiply and add with itself
z = z +(x*y)
x*y has size (x+y)
z also be max((x+y),(x+y)) + 1
z = x+y+1


CORDIC
https://github.com/KastnerRG/pp4fpgas
/home/ramdas/Work/Learning/CPP_Learning/PP4FPGA_HLS/CORDIC/cordic_ex_1
run_hls.tcl
Next step fix the number representation 
