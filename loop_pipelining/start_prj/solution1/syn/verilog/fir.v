// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fir,hls_ip_2018_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xa7a12tcsg325-1q,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.470000,HLS_SYN_LAT=56,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=3,HLS_SYN_FF=925,HLS_SYN_LUT=326,HLS_VERSION=2018_2}" *)

module fir (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        y,
        y_ap_vld,
        c_address0,
        c_ce0,
        c_q0,
        x
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_pp0_stage0 = 7'd16;
parameter    ap_ST_fsm_pp0_stage1 = 7'd32;
parameter    ap_ST_fsm_state9 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [31:0] y;
output   y_ap_vld;
output  [3:0] c_address0;
output   c_ce0;
input  [31:0] c_q0;
input  [31:0] x;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg y_ap_vld;
reg c_ce0;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] shift_reg_0;
reg   [31:0] shift_reg_10;
reg   [31:0] shift_reg_1;
reg   [31:0] shift_reg_2;
reg   [31:0] shift_reg_3;
reg   [31:0] shift_reg_4;
reg   [31:0] shift_reg_5;
reg   [31:0] shift_reg_6;
reg   [31:0] shift_reg_7;
reg   [31:0] shift_reg_8;
reg   [31:0] shift_reg_9;
reg   [31:0] acc_reg_161;
reg   [4:0] i_1_reg_174;
reg  signed [31:0] UnifiedRetVal_i_reg_186;
reg   [31:0] reg_250;
wire    ap_CS_fsm_state2;
wire   [0:0] tmp_fu_308_p2;
wire   [3:0] ap_phi_mux_i_phi_fu_128_p4;
reg   [31:0] reg_256;
reg   [31:0] reg_262;
reg   [31:0] reg_268;
reg   [31:0] reg_274;
reg   [31:0] reg_280;
reg   [31:0] reg_286;
reg   [31:0] reg_292;
reg   [31:0] reg_298;
reg   [31:0] shift_reg_0_load_reg_428;
wire   [3:0] i_2_fu_314_p2;
reg   [3:0] i_2_reg_437;
reg   [31:0] shift_reg_10_load_reg_442;
wire   [0:0] tmp_1_fu_389_p3;
reg   [0:0] tmp_1_reg_447;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state5_pp0_stage0_iter0;
wire    ap_block_state7_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] tmp_1_reg_447_pp0_iter1_reg;
wire   [3:0] tmp_3_fu_402_p1;
reg  signed [31:0] c_load_reg_460;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state6_pp0_stage1_iter0;
wire    ap_block_state8_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
wire   [4:0] i_3_fu_406_p2;
reg   [4:0] i_3_reg_465;
reg    ap_enable_reg_pp0_iter0;
wire   [31:0] tmp_6_fu_412_p2;
reg   [31:0] tmp_6_reg_470;
wire   [31:0] acc_1_fu_417_p2;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state5;
wire    ap_block_pp0_stage1_subdone;
reg   [3:0] i_reg_124;
wire    ap_CS_fsm_state4;
reg   [31:0] shift_reg_load_phi_reg_136;
reg   [4:0] ap_phi_mux_i_1_phi_fu_178_p4;
wire    ap_block_pp0_stage0;
reg  signed [31:0] ap_phi_reg_pp0_iter0_UnifiedRetVal_i_reg_186;
wire   [63:0] tmp_5_fu_397_p1;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state9;
wire    ap_block_pp0_stage1;
reg   [6:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_443;
reg    ap_condition_434;
reg    ap_condition_455;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
#0 shift_reg_0 = 32'd0;
#0 shift_reg_10 = 32'd0;
#0 shift_reg_1 = 32'd0;
#0 shift_reg_2 = 32'd0;
#0 shift_reg_3 = 32'd0;
#0 shift_reg_4 = 32'd0;
#0 shift_reg_5 = 32'd0;
#0 shift_reg_6 = 32'd0;
#0 shift_reg_7 = 32'd0;
#0 shift_reg_8 = 32'd0;
#0 shift_reg_9 = 32'd0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state5) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((tmp_fu_308_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state5) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state5);
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((tmp_fu_308_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_1_reg_447_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        acc_reg_161 <= acc_1_fu_417_p2;
    end else if (((tmp_fu_308_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        acc_reg_161 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_434)) begin
        if ((tmp_3_fu_402_p1 == 4'd0)) begin
            ap_phi_reg_pp0_iter0_UnifiedRetVal_i_reg_186 <= x;
        end else if ((1'b1 == ap_condition_443)) begin
            ap_phi_reg_pp0_iter0_UnifiedRetVal_i_reg_186 <= shift_reg_10_load_reg_442;
        end else if ((tmp_3_fu_402_p1 == 4'd9)) begin
            ap_phi_reg_pp0_iter0_UnifiedRetVal_i_reg_186 <= reg_298;
        end else if ((tmp_3_fu_402_p1 == 4'd8)) begin
            ap_phi_reg_pp0_iter0_UnifiedRetVal_i_reg_186 <= reg_250;
        end else if ((tmp_3_fu_402_p1 == 4'd7)) begin
            ap_phi_reg_pp0_iter0_UnifiedRetVal_i_reg_186 <= reg_256;
        end else if ((tmp_3_fu_402_p1 == 4'd6)) begin
            ap_phi_reg_pp0_iter0_UnifiedRetVal_i_reg_186 <= reg_262;
        end else if ((tmp_3_fu_402_p1 == 4'd5)) begin
            ap_phi_reg_pp0_iter0_UnifiedRetVal_i_reg_186 <= reg_268;
        end else if ((tmp_3_fu_402_p1 == 4'd4)) begin
            ap_phi_reg_pp0_iter0_UnifiedRetVal_i_reg_186 <= reg_274;
        end else if ((tmp_3_fu_402_p1 == 4'd3)) begin
            ap_phi_reg_pp0_iter0_UnifiedRetVal_i_reg_186 <= reg_280;
        end else if ((tmp_3_fu_402_p1 == 4'd2)) begin
            ap_phi_reg_pp0_iter0_UnifiedRetVal_i_reg_186 <= reg_286;
        end else if ((tmp_3_fu_402_p1 == 4'd1)) begin
            ap_phi_reg_pp0_iter0_UnifiedRetVal_i_reg_186 <= reg_292;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_1_reg_447 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_1_reg_174 <= i_3_reg_465;
    end else if (((tmp_fu_308_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i_1_reg_174 <= 5'd10;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_reg_124 <= i_2_reg_437;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_124 <= 4'd10;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_308_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        if ((ap_phi_mux_i_phi_fu_128_p4 == 4'd1)) begin
            shift_reg_load_phi_reg_136 <= shift_reg_0_load_reg_428;
        end else if ((1'b1 == ap_condition_455)) begin
            shift_reg_load_phi_reg_136 <= shift_reg_9;
        end else if ((ap_phi_mux_i_phi_fu_128_p4 == 4'd9)) begin
            shift_reg_load_phi_reg_136 <= shift_reg_8;
        end else if ((ap_phi_mux_i_phi_fu_128_p4 == 4'd8)) begin
            shift_reg_load_phi_reg_136 <= shift_reg_7;
        end else if ((ap_phi_mux_i_phi_fu_128_p4 == 4'd7)) begin
            shift_reg_load_phi_reg_136 <= shift_reg_6;
        end else if ((ap_phi_mux_i_phi_fu_128_p4 == 4'd6)) begin
            shift_reg_load_phi_reg_136 <= shift_reg_5;
        end else if ((ap_phi_mux_i_phi_fu_128_p4 == 4'd5)) begin
            shift_reg_load_phi_reg_136 <= shift_reg_4;
        end else if ((ap_phi_mux_i_phi_fu_128_p4 == 4'd4)) begin
            shift_reg_load_phi_reg_136 <= shift_reg_3;
        end else if ((ap_phi_mux_i_phi_fu_128_p4 == 4'd3)) begin
            shift_reg_load_phi_reg_136 <= shift_reg_2;
        end else if ((ap_phi_mux_i_phi_fu_128_p4 == 4'd2)) begin
            shift_reg_load_phi_reg_136 <= shift_reg_1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        UnifiedRetVal_i_reg_186 <= ap_phi_reg_pp0_iter0_UnifiedRetVal_i_reg_186;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_1_reg_447 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        c_load_reg_460 <= c_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_308_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_2_reg_437 <= i_2_fu_314_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_1_reg_447 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        i_3_reg_465 <= i_3_fu_406_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((tmp_fu_308_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_phi_mux_i_phi_fu_128_p4 == 4'd9) & (tmp_fu_308_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        reg_250 <= shift_reg_8;
    end
end

always @ (posedge ap_clk) begin
    if ((((tmp_fu_308_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_phi_mux_i_phi_fu_128_p4 == 4'd8) & (tmp_fu_308_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        reg_256 <= shift_reg_7;
    end
end

always @ (posedge ap_clk) begin
    if ((((tmp_fu_308_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_phi_mux_i_phi_fu_128_p4 == 4'd7) & (tmp_fu_308_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        reg_262 <= shift_reg_6;
    end
end

always @ (posedge ap_clk) begin
    if ((((tmp_fu_308_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_phi_mux_i_phi_fu_128_p4 == 4'd6) & (tmp_fu_308_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        reg_268 <= shift_reg_5;
    end
end

always @ (posedge ap_clk) begin
    if ((((tmp_fu_308_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_phi_mux_i_phi_fu_128_p4 == 4'd5) & (tmp_fu_308_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        reg_274 <= shift_reg_4;
    end
end

always @ (posedge ap_clk) begin
    if ((((tmp_fu_308_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_phi_mux_i_phi_fu_128_p4 == 4'd4) & (tmp_fu_308_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        reg_280 <= shift_reg_3;
    end
end

always @ (posedge ap_clk) begin
    if ((((tmp_fu_308_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_phi_mux_i_phi_fu_128_p4 == 4'd3) & (tmp_fu_308_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        reg_286 <= shift_reg_2;
    end
end

always @ (posedge ap_clk) begin
    if ((((tmp_fu_308_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_phi_mux_i_phi_fu_128_p4 == 4'd2) & (tmp_fu_308_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        reg_292 <= shift_reg_1;
    end
end

always @ (posedge ap_clk) begin
    if ((((tmp_fu_308_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | (~(ap_phi_mux_i_phi_fu_128_p4 == 4'd5) & ~(ap_phi_mux_i_phi_fu_128_p4 == 4'd6) & ~(ap_phi_mux_i_phi_fu_128_p4 == 4'd7) & ~(ap_phi_mux_i_phi_fu_128_p4 == 4'd8) & ~(ap_phi_mux_i_phi_fu_128_p4 == 4'd9) & ~(ap_phi_mux_i_phi_fu_128_p4 == 4'd1) & ~(ap_phi_mux_i_phi_fu_128_p4 == 4'd2) & ~(ap_phi_mux_i_phi_fu_128_p4 == 4'd3) & ~(ap_phi_mux_i_phi_fu_128_p4 == 4'd4) & (tmp_fu_308_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        reg_298 <= shift_reg_9;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_308_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        shift_reg_0 <= x;
        shift_reg_10_load_reg_442 <= shift_reg_10;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        shift_reg_0_load_reg_428 <= shift_reg_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (i_reg_124 == 4'd1))) begin
        shift_reg_1 <= shift_reg_load_phi_reg_136;
    end
end

always @ (posedge ap_clk) begin
    if ((~(i_reg_124 == 4'd9) & ~(i_reg_124 == 4'd8) & ~(i_reg_124 == 4'd7) & ~(i_reg_124 == 4'd6) & ~(i_reg_124 == 4'd5) & ~(i_reg_124 == 4'd4) & ~(i_reg_124 == 4'd3) & ~(i_reg_124 == 4'd2) & ~(i_reg_124 == 4'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        shift_reg_10 <= shift_reg_load_phi_reg_136;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (i_reg_124 == 4'd2))) begin
        shift_reg_2 <= shift_reg_load_phi_reg_136;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (i_reg_124 == 4'd3))) begin
        shift_reg_3 <= shift_reg_load_phi_reg_136;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (i_reg_124 == 4'd4))) begin
        shift_reg_4 <= shift_reg_load_phi_reg_136;
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_124 == 4'd5) & (1'b1 == ap_CS_fsm_state3))) begin
        shift_reg_5 <= shift_reg_load_phi_reg_136;
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_124 == 4'd6) & (1'b1 == ap_CS_fsm_state3))) begin
        shift_reg_6 <= shift_reg_load_phi_reg_136;
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_124 == 4'd7) & (1'b1 == ap_CS_fsm_state3))) begin
        shift_reg_7 <= shift_reg_load_phi_reg_136;
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_124 == 4'd8) & (1'b1 == ap_CS_fsm_state3))) begin
        shift_reg_8 <= shift_reg_load_phi_reg_136;
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_124 == 4'd9) & (1'b1 == ap_CS_fsm_state3))) begin
        shift_reg_9 <= shift_reg_load_phi_reg_136;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_1_reg_447 <= ap_phi_mux_i_1_phi_fu_178_p4[32'd4];
        tmp_1_reg_447_pp0_iter1_reg <= tmp_1_reg_447;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_1_reg_447 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_6_reg_470 <= tmp_6_fu_412_p2;
    end
end

always @ (*) begin
    if ((tmp_1_fu_389_p3 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state5 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state5 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_1_reg_447 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_i_1_phi_fu_178_p4 = i_3_reg_465;
    end else begin
        ap_phi_mux_i_1_phi_fu_178_p4 = i_1_reg_174;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        c_ce0 = 1'b1;
    end else begin
        c_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        y_ap_vld = 1'b1;
    end else begin
        y_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_fu_308_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((tmp_1_fu_389_p3 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((tmp_1_fu_389_p3 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b0)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign acc_1_fu_417_p2 = (tmp_6_reg_470 + acc_reg_161);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd6];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_434 = ((tmp_1_fu_389_p3 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001));
end

always @ (*) begin
    ap_condition_443 = (~(tmp_3_fu_402_p1 == 4'd0) & ~(tmp_3_fu_402_p1 == 4'd9) & ~(tmp_3_fu_402_p1 == 4'd8) & ~(tmp_3_fu_402_p1 == 4'd7) & ~(tmp_3_fu_402_p1 == 4'd6) & ~(tmp_3_fu_402_p1 == 4'd5) & ~(tmp_3_fu_402_p1 == 4'd4) & ~(tmp_3_fu_402_p1 == 4'd3) & ~(tmp_3_fu_402_p1 == 4'd2) & ~(tmp_3_fu_402_p1 == 4'd1));
end

always @ (*) begin
    ap_condition_455 = (~(ap_phi_mux_i_phi_fu_128_p4 == 4'd5) & ~(ap_phi_mux_i_phi_fu_128_p4 == 4'd6) & ~(ap_phi_mux_i_phi_fu_128_p4 == 4'd7) & ~(ap_phi_mux_i_phi_fu_128_p4 == 4'd8) & ~(ap_phi_mux_i_phi_fu_128_p4 == 4'd9) & ~(ap_phi_mux_i_phi_fu_128_p4 == 4'd1) & ~(ap_phi_mux_i_phi_fu_128_p4 == 4'd2) & ~(ap_phi_mux_i_phi_fu_128_p4 == 4'd3) & ~(ap_phi_mux_i_phi_fu_128_p4 == 4'd4));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_mux_i_phi_fu_128_p4 = i_reg_124;

assign c_address0 = tmp_5_fu_397_p1;

assign i_2_fu_314_p2 = ($signed(i_reg_124) + $signed(4'd15));

assign i_3_fu_406_p2 = ($signed(i_1_reg_174) + $signed(5'd31));

assign tmp_1_fu_389_p3 = ap_phi_mux_i_1_phi_fu_178_p4[32'd4];

assign tmp_3_fu_402_p1 = ap_phi_mux_i_1_phi_fu_178_p4[3:0];

assign tmp_5_fu_397_p1 = ap_phi_mux_i_1_phi_fu_178_p4;

assign tmp_6_fu_412_p2 = ($signed(c_load_reg_460) * $signed(UnifiedRetVal_i_reg_186));

assign tmp_fu_308_p2 = ((i_reg_124 == 4'd0) ? 1'b1 : 1'b0);

assign y = acc_reg_161;

endmodule //fir
